#!/bin/sh
VERSION="v4.13b3"
#============================================================================================ Â© 2021 Martineau v4.13b3
#

# Maintainer: Martineau
# Last Updated Date: 30-Oct-2021
#
# Description:
#
# Acknowledgement:
#
# Contributors: odkrys,@ZebMcKayhan,Torson,The Chief

#For verbose debugging, uncomment the following two lines, and uncomment the last line of this script
#set -x
#(

Parse() {
    #
    #   Parse       "Word1,Word2|Word3" ",|" VAR1 VAR2 REST
    #               (Effectivley executes VAR1="Word1";VAR2="Word2";REST="Word3")

    local TEXT IFS

    TEXT="$1"
    IFS="$2"
    shift 2
    read -r -- "$@" <<EOF
$TEXT
EOF
}
# shellcheck disable=SC2034
ANSIColours() {

    cRESET="\e[0m";cBLA="\e[30m";cRED="\e[31m";cGRE="\e[32m";cYEL="\e[33m";cBLU="\e[34m";cMAG="\e[35m";cCYA="\e[36m";cGRA="\e[37m"
    cBGRA="\e[90m";cBRED="\e[91m";cBGRE="\e[92m";cBYEL="\e[93m";cBBLU="\e[94m";cBMAG="\e[95m";cBCYA="\e[96m";cBWHT="\e[97m"
    aBOLD="\e[1m";aDIM="\e[2m";aUNDER="\e[4m";aBLINK="\e[5m";aREVERSE="\e[7m"
    cRED_="\e[41m";cGRE_="\e[42m"

}
Is_HND() {
    # Use the following at the command line otherwise 'return X' makes the SSH session terminate!
    #[ -n "$(uname -m | grep "aarch64")" ] && echo Y || echo N
    [ -n "$(uname -m | grep "aarch64")" ] && { echo Y; return 0; } || { echo N; return 1; }
}
Is_AX() {
    # Kernel is '4.1.52+' (i.e. isn't '2.6.36*') and it isn't HND
    # Use the following at the command line otherwise 'return X' makes the SSH session terminate!
    # [ -n "$(uname -r | grep "^4")" ] && [ -z "$(uname -m | grep "aarch64")" ] && echo Y || echo N
    [ -n "$(uname -r | grep "^4")" ] && [ -z "$(uname -m | grep "aarch64")" ] && { echo Y; return 0; } || { echo N; return 1; }
}
Is_IPv4 () {
        grep -oE '^([0-9]{1,3}\.){3}[0-9]{1,3}$'                    # IPv4 format
}
Is_IPv4_CIDR () {
        grep -oE '^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$'         # IPv4 CIDR range notation
}
Is_IPv6() {
    # Note this matches compression anywhere in the address, though it won't match the loopback address ::1
    grep -oE '([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4}'       # IPv6 format -very crude
}
Firewall_delete() {

    iptables -t mangle -D FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'client'" 2>/dev/null
    iptables -t mangle -D FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'client'" 2>/dev/null
    iptables -t mangle -D FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'client'" 2>/dev/null
    iptables -t mangle -D PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'client'" 2>/dev/null

    #if [ $FIRMWARE -ge 38601 ];then         # Guest #1 SSID VLANs SNB @ZebMcKayhan
            iptables -t filter -D FORWARD -i br1 -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard Guest_VLAN" 2>/dev/null
            iptables -t filter -D FORWARD -i br2 -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard Guest_VLAN" 2>/dev/null
            iptables -t nat -D POSTROUTING -s $(nvram get lan_ipaddr)/16 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'" 2>/dev/null
            iptables -t nat -D PREROUTING -s $(nvram get lan_ipaddr)/16 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'" 2>/dev/null
    #else
            iptables -t nat -D POSTROUTING -s $(nvram get lan_ipaddr)/24 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'" 2>/dev/null
    #fi

    iptables -t nat -D PREROUTING -p tcp -m tcp --dport 53 -j WGDNS${VPN_NUM} -m comment --comment "WireGuard 'client${VPN_NUM} DNS'" 2>/dev/null
    iptables -t nat -D PREROUTING -p udp -m udp --dport 53 -j WGDNS${VPN_NUM} -m comment --comment "WireGuard 'client${VPN_NUM} DNS'" 2>/dev/null
    iptables -t nat -D PREROUTING -p tcp -m tcp --dport 53 -j WGDNS${WG_INTERFACE} -m comment --comment "WireGuard 'client${WG_INTERFACE} DNS'" 2>/dev/null
    iptables -t nat -D PREROUTING -p udp -m udp --dport 53 -j WGDNS${WG_INTERFACE} -m comment --comment "WireGuard 'client${WG_INTERFACE} DNS'" 2>/dev/null

    if [ "$(nvram get ipv6_service)" != "disabled" ];then       # v4.08
        ip6tables -t mangle -D FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'client'" 2>/dev/null
        ip6tables -t mangle -D FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'client'" 2>/dev/null
        ip6tables -t mangle -D FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'client'" 2>/dev/null
        ip6tables -t mangle -D PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'client'" 2>/dev/null

    #if [ $FIRMWARE -ge 38601 ];then         # Guest #1 SSID VLANs SNB @ZebMcKayhan
            ip6tables -t filter -D FORWARD -i br1 -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard Guest_VLAN" 2>/dev/null
            ip6tables -t filter -D FORWARD -i br2 -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard Guest_VLAN" 2>/dev/null
            ip6tables -t nat -D POSTROUTING -s $(nvram get lan_ipaddr)/16 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'" 2>/dev/null
            ip6tables -t nat -D PREROUTING -s $(nvram get lan_ipaddr)/16 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'" 2>/dev/null
    #else
            ip6tables -t nat -D POSTROUTING -s $(nvram get lan_ipaddr)/24 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'" 2>/dev/null
    #fi

        ip6tables -t nat -D PREROUTING -p tcp -m tcp --dport 53 -j WGDNS${VPN_NUM} -m comment --comment "WireGuard 'client${VPN_NUM} DNS'" 2>/dev/null
        ip6tables -t nat -D PREROUTING -p udp -m udp --dport 53 -j WGDNS${VPN_NUM} -m comment --comment "WireGuard 'client${VPN_NUM} DNS'" 2>/dev/null

    fi

}
# Adapted from RMerlin's 'vpnrouting.sh'
create_client_list(){

    # v4.09 Use new 'policy' table layout
    [ $(sqlite3 $SQL_DATABASE "SELECT COUNT(peer) FROM policy WHERE peer='$WG_INTERFACE';") -eq 0 ] && { logger -t "wireguard-${MODE}${VPN_NAME}" "Warning: No Selective Routing rules found";return 1; }
    sqlite3 $SQL_DATABASE "SELECT iface,srcip,dstip FROM policy WHERE peer='$WG_INTERFACE' ORDER BY iface DESC;" | while read RULE
    do
        [ -z "$RULE" ] && continue
        local TARGET_ROUTE=$(echo $RULE | awk -F '|' '{print $1}')
        if [ "$TARGET_ROUTE" = "WAN" ]
        then
            local TARGET_LOOKUP="main"
            #WAN_PRIO=$((WAN_PRIO+1))
            local RULE_PRIO=$WAN_PRIO
            local TARGET_NAME="WAN"
        else
            local TARGET_LOOKUP=$VPN_TBL
            #VPN_PRIO=$((VPN_PRIO+1))
            local RULE_PRIO=$VPN_PRIO
            local TARGET_NAME="VPN 'client' Peer $VPN_UNIT"
        fi
        local VPN_IP=$(echo $RULE | awk -F '|' '{print $2}')
        if [ "$VPN_IP" != "Any" ] && [ -n "$VPN_IP" ]           # v4.09
        then
            local SRCC="from"
            local SRCA="$VPN_IP"
        else
            local SRCC=""
            local SRCA=""
        fi
        local DST_IP=$(echo $RULE | awk -F '|' '{print $3}')
        if [ "$DST_IP" != "Any" ] && [ -n "$DST_IP" ]           # v4.09
        then
            local DSTC="to"
            local DSTA="$DST_IP"
        else
            local DSTC=""
            local DSTA=""
        fi

        if [ -n "$SRCC" ] || [ -n "$DSTC" ]
        then
            if [ "$USE_IPV6" != "Y" ];then                      # v4.08
                ip rule add $SRCC $SRCA $DSTC $DSTA table $TARGET_LOOKUP priority $RULE_PRIO
            else
                ip -6 rule add $SRCC $SRCA $DSTC $DSTA table $TARGET_LOOKUP priority $RULE_PRIO
            fi

            echo -en $cBCYA
            [ "$DSTC" == "to" ] && DSTC="to "
            logger -t "wireguard-${MODE}${VPN_NAME}" "Adding Wireguard 'client' Peer route ${SRCA}${DSTC}$DSTA through $TARGET_NAME"
            echo -en $cRESET

            if [ -n "$PEER_DNS" ] && [ "$TARGET_LOOKUP" != "main" ] && [ "$VPN_IP" != "Any" ];then
                iptables -t nat -A WGDNS$VPN_NUM -s ${VPN_IP} -j DNAT --to-destination $PEER_DNS -m comment --comment "WireGuard 'client${VPN_NUM} DNS'"     # v4.05
            fi
        fi
    done
}
purge_client_list(){
    IP_LIST=$(ip rule show | cut -d ":" -f 1)
    for PRIO in $IP_LIST
    do
        if [ "$PRIO" -ge "$START_PRIO" ] && [ "$PRIO" -le "$END_PRIO" ]
        then
            ip rule del prio $PRIO
            echo -en $cBCYA"\t"
            logger -st "wireguard-${MODE}${VPN_NAME}" "Removing Wireguard 'client' Peer rule $PRIO from routing policy"
            echo -en $cRESET
        fi
    done
}
Manage_Passthru(){

    local SERVER_DEVICEPEERS=$(sqlite3 /opt/etc/wireguard.d/WireGuard.db "SELECT server,ip_subnet FROM passthru where client='$WG_INTERFACE';" | tr '\n' ' ')

    local PASSTHRU_SERVER
    local PASSTHRU

    local ACTION="add"
    [ -n "$1" ] && ACTION=$1        # "del" or "add"

    if [ -n "$SERVER_DEVICEPEERS" ];then

        for ITEM in $SERVER_DEVICEPEERS     # wg21|all or wg22|SGS8 or wg21|10.0.0.0/27
            do
                Parse "$ITEM" "|" PASSTHRU_SERVER PASSTHRU

                if [ "$PASSTHRU" == "all" ];then
                    # Use 'server' peer clients subnet
                    local IP_ADDR=$(sqlite3 $SQL_DATABASE "SELECT subnet FROM servers where peer='$PASSTHRU_SERVER';")
                    local TYPE="Subnet"
                else
                    local IP_ADDR=$(sqlite3 $SQL_DATABASE "SELECT ip FROM devices where name='$PASSTHRU';" 2> /dev/null)
                    [ -z "$IP_ADDR" ] && local IP_ADDR=$PASSTHRU
                    local TYPE="I/P"
                fi

                if [ -n "$IP_ADDR" ];then
                    #logger -t "wireguard-${MODE}${VPN_NAME}" "Psuedo command 'pass-thru' will be applied to "$TYPE $IP_ADDR "directly via VPN Client '"$WG_INTERFACE"' ("$DESC")"
                    ip rule del from $IP_ADDR table 12$VPN_NUM prio 998$VPN_NUM 2> /dev/null
                    [ "$ACTION" != "del" ] && ip rule $ACTION from $IP_ADDR table 12$VPN_NUM prio 998$VPN_NUM
                    logger -t "wireguard-${MODE}${VPN_NAME}" "'server' peer '$PASSTHRU_SERVER' RPDB" "'pass-thru': 'ip rule $ACTION from $IP_ADDR table 12$VPN_NUM'"
                    iptables -t nat -D POSTROUTING -s  $IP_ADDR -o wg1$VPN_NUM -j MASQUERADE 2> /dev/null
                    [ "$ACTION" != "del" ] && iptables -t nat -I POSTROUTING -s  $IP_ADDR -o wg1$VPN_NUM -j MASQUERADE

                    if [ "$ACTION" == "add" ];then
                        # Ensure target WireGuard 'client' peer routing policy table contains WireGuard 'server' peer IP/network in the passthru tunnel @chongnt
                        if [ -n "$(wg show interfaces | grep "$SERVERS")" ];then

                            while read ROUTE; do
                               ip route $ACTION $ROUTE table 12$VPN_NUM 2>/dev/null && ROUTING_CHANGED=
                            done << EOR
$(ip route | grep "$PASSTHRU_SERVER")
EOR

                        fi
                        [ ${ROUTING_CHANGED+x} ] && ip route flush cache || logger -st "wireguard-${MODE}${VPN_NAME}" "Warning 'server' peer ($PASSTHRU_SERVER) route not found - is it UP?"
                    fi
                fi
            done
    fi
}
#=============================================Main=============================================================
# shellcheck disable=SC2068
Main() { true; } # Syntax that is Atom Shellchecker compatible!

ANSIColours

CONFIG_DIR="/opt/etc/wireguard.d/"                 # Conform to "standards"         # v1.05 @elorimer
INSTALL_DIR="/jffs/addons/wireguard/"
SQL_DATABASE="/opt/etc/wireguard.d/WireGuard.db"        # v1.08

FIRMWARE=$(echo $(nvram get buildno) | awk 'BEGIN { FS = "." } {printf("%03d%02d",$1,$2)}')

modprobe xt_set
modprobe xt_comment
insmod /opt/lib/modules/wireguard 2> /dev/null

#insmod /opt/lib/modules/wireguard
VPN_ID=$1
[ -z "$1" ] && VPN_ID="wg0"
[ "${VPN_ID:0:3}" == "wg1" ] && { MODE="client"; TXT="to"; } || { MODE="server"; TXT="Hosted at"; }
VPN_NUM=${VPN_ID#"${VPN_ID%?}"}    # i.e. 'client' Peer prio '99x[0|1]' where the RPDB rules for 'client' Peers 'wg11'-wg15' are '991x-995x'

WG_INTERFACE=$VPN_ID

[ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ] && VPN_NAME=$VPN_ID || VPN_NAME=$WG_INTERFACE # v4.10

LAN_ADDR=$(nvram get lan_ipaddr)                                # v4.05
LAN_SUBNET=${LAN_ADDR%.*}                                       # v4.05

#[ -n "$(echo "$Subnet" | Is_Private_IPv6)" ] && { USE_IPV6="Y"; IPV6_TXT="(IPv6) "; }
[ "$(nvram get ipv6_service)" != "disabled" ] && { USE_IPV6="Y"; IPV6_TXT="(IPv6) "; }          # 4.08

# Override IPv6 ?
if [ -f /jffs/addons/wireguard/WireguardVPN.conf ] && [ -n "$(grep -E "^NOIPV6" /jffs/addons/wireguard/WireguardVPN.conf)" ];then    # v4.12
    USE_IPV6="N"; IPV6_TXT=
    logger -t "wireguard-${MODE}${VPN_NAME}" "'NOIPV6' directive found ('WireguardVPN.conf')- IPv6 configuration forced to IPv4"    # v4.12
fi

[ -n "$(echo "$@" | grep "force")" ] && local FORCE="force"

# Is this a standard 'client' Peer interface 'wg11-wg15'                    # v1.03
if [ -z "$(echo "$VPN_ID" |  grep -oE "^wg[0-2]")" ];then      # v4.02 v1.03
    # Non-standard so identfy if it's a 'client' or 'server' Peer
    if [ -f ${CONFIG_DIR}${VPN_ID}.conf ];then                                  # v1.03
        if [ -n "$(grep -E "^Endpoint" ${CONFIG_DIR}${VPN_ID}.conf)" ];then     # v1.03
            MODE="client"
            TXT="to"
            SOCKET="$(awk '/^Endpoint/ {print $3}' ${CONFIG_DIR}${VPN_ID}.conf)"                    # v1.03
            LOCALIP="$(awk -F "[ :]" '/^Endpoint/ {print $3}' ${CONFIG_DIR}${VPN_ID}.conf)"     # v1.03
        else
            echo -e $cBRED"\a\n\t***ERROR: WireGuard '$MODE' not supported by $0!\n"$cRESET
            exit 87
        fi
    fi
fi

[ -n "$(echo "$@" | grep "policy")" ] && POLICY_MODE="in Policy Mode " || POLICY_MODE=

# Read the database to set the Annotation Description and LOCAL peer endpoint etc.
if [ "$MODE" == "client" ];then                         # v1.03
    if [ -z "$LOCALIP" ];then
       LOCALIP=$(sqlite3 $SQL_DATABASE "SELECT subnet FROM clients where peer='$WG_INTERFACE';")
       export LocalIP=$LOCALIP
    fi
    PEER_DNS=$(sqlite3 $SQL_DATABASE "SELECT dns FROM clients where peer='$WG_INTERFACE';")        # v4.05

    [ -z "$SOCKET" ] && SOCKET=$(sqlite3 $SQL_DATABASE "SELECT socket FROM clients where peer='$WG_INTERFACE';")
    if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.09
        START_PRIO=99${VPN_NUM}0
        END_PRIO=99${VPN_NUM}9
        WAN_PRIO=99${VPN_NUM}0
        VPN_PRIO=99${VPN_NUM}1
        VPN_TBL=12$VPN_NUM
        VPN_UNIT=$VPN_ID
    else                            # v4.10
        START_PRIO=99999
        END_PRIO=99999
        VPN_PRIO=99999
        WAN_PRIO=99999
    fi
else
    SOCKET=$(nvram get wan_gateway)":"$(awk '/Listen/ {print $3}' ${CONFIG_DIR}${VPN_ID}.conf)      # v1.03
fi

DESC=$(sqlite3 $SQL_DATABASE "SELECT tag FROM clients where peer='$WG_INTERFACE';")
DESC=$(printf "%s" "$DESC" | sed 's/^[ \t]*//;s/[ \t]*$//')
[ -z "$DESC" ] && DESC="# Unidentified"

MTU=$(sqlite3 $SQL_DATABASE "SELECT mtu FROM clients where peer='$WG_INTERFACE';")          # v4.09
[ -z "$MTU" ] && MTU=1420                                                                   # v4.09

if [ "$1" != "disable" ] && [ "$2" != "disable" ];then

    if [ -n "$LOCALIP" ] || [ "$MODE" == "client" ];then                                # v1.03
        logger -t "wireguard-${MODE}${VPN_NAME}" "Initialising Wireguard VPN $MODE Peer ($VPN_ID) ${POLICY_MODE}${TXT} $SOCKET ($DESC)"
        echo -e $cBCYA"\twireguard-${MODE}${VPN_NAME}: Initialising Wireguard VPN '$MODE' Peer (${cBMAG}$VPN_ID${cBCYA}) ${POLICY_MODE}${TXT} $SOCKET (${cBMAG}$DESC${cBCYA}) ${cBWHT}DNS=$PEER_DNS"$cRESET

        if [ -n "$PEER_DNS" ];then            # v4.05
            if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.09
                if [ "$USE_IPV6" != "Y" ];then                              # v4.11
                    iptables -t nat -N WGDNS${VPN_NUM}                      # v4.05
                else
                    ip6tables -t nat -N WGDNS${VPN_NUM}                     # v4.11
                fi
                [ $? -gt 0 ] && { echo -e $cBRED"\a\n\t"; logger -st "wireguard-${MODE}${VPN_NAME}" "***ERROR Failed to create -t nat WGDNS${VPN_NUM}."; echo -e $cRESET; exit 99; }
            else
                if [ "$USE_IPV6" != "Y" ];then                              # v4.11
                    iptables -t nat -N WGDNS${WG_INTERFACE}                 # v4.09
                else
                    ip6tables -t nat -N WGDNS${WG_INTERFACE}                # v4.11
                fi
                [ $? -gt 0 ] && { echo -e $cBRED"\a\n\t"; logger -st "wireguard-${MODE}${WG_INTERFACE}" "***ERROR Failed to create -t nat WGDNS${WG_INTERFACE}."; echo -e $cRESET; exit 99; }
            fi
        fi

        if [ "$USE_IPV6" != "Y" ];then                      # v4.08
            ip link del dev $VPN_ID 2>/dev/null
            ip link add dev $VPN_ID type wireguard
        else
            ip -6 link del dev $VPN_ID 2>/dev/null
            ip -6 link add dev $VPN_ID type wireguard
        fi

        wg setconf $VPN_ID ${CONFIG_DIR}$VPN_ID.conf
        #  Suppress the message if a domain is supplied i.e.'Error: any valid prefix is expected rather than "'xxx.com"

        # v4.12 Assign both IPv6 nd IPv6 IPs to interface as required
        LOCALIPS=$(echo "$LOCALIP" | tr ',' ' ')     # v4.11
        for LOCALIP in $LOCALIPS
            do
                if [ "$USE_IPV6" == "Y" ] && [ -n "$(echo "$LOCALIP" | grep -F ":")" ];then     # v4.12
                    ip -6 address add dev $VPN_ID $LOCALIP 2>/dev/null     # v4.02
                    ip -6 link set up dev $VPN_ID
                else
                    if [ -n "$(echo "$LOCALIP" | Is_IPv4_CIDR)" ] || [ -n "$(echo "$LOCALIP" | Is_IPv4)" ];then
                        ip address add dev $VPN_ID $LOCALIP 2>/dev/null # v4.02
                        ip link set up dev $VPN_ID
                    fi
                fi
            done

        #ifconfig $VPN_ID mtu 1380
        ifconfig $VPN_ID mtu $MTU                           # v4.09 v1.02
        ifconfig $VPN_ID txqueuelen 1000

        TIMESTAMP=$(date +%s)
        sqlite3 $SQL_DATABASE "INSERT into session values('$WG_INTERFACE','Start','$TIMESTAMP');"   # v1.08
        sqlite3 $SQL_DATABASE "INSERT into traffic values('$WG_INTERFACE','$TIMESTAMP','0','0','0','0');"

        # User Exit @Torson
        [ -f ${INSTALL_DIR}Scripts/${VPN_ID}-route-up.sh ] && { logger -t "wireguard-${MODE}${VPN_NAME}" "Executing Event:${VPN_ID}-route-up.sh"; sh ${INSTALL_DIR}Scripts/${VPN_ID}-route-up.sh; }

        host="$(wg show $VPN_ID endpoints | sed -n 's/.*\t\(.*\):.*/\1/p')"
        if [ -n "$(echo "$host" | Is_IPv4)" ];then          # v4.08
            ip route add $(ip route get $host | sed '/ via [0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/{s/^\(.* via [0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\).*/\1/}' | head -n 1) 2>/dev/null
        else
            :
            # ip -6 route add
        fi

        # If there is ALREADY an ACTIVE WireGuard VPN Client, then tough! - make this one the default!!!!
        if [ -z "$POLICY_MODE" ];then
            if [ "$(wg show interfaces | grep -E "wg[0-1]" | wc -w)" -gt 1 ];then
                for THIS in $(wg show interfaces | grep -E "wg[0-1]")
                    do
                        ip route del 0/1   dev $THIS  2>/dev/null
                        ip route del 128/1 dev $THIS  2>/dev/null
                    done
            fi
            # 0.0.0.0/0 Default
            if [ "$USE_IPV6" != "Y" ];then                  # v4.08
                ip route add 0/1   dev $VPN_ID 2>/dev/null
                ip route add 128/1 dev $VPN_ID 2>/dev/null
            else
                ip -6 route add ::/1     dev $VPN_ID 2>/dev/null    # v4.12
                ip -6 route add 8000::/1 dev $VPN_ID 2>/dev/null    # v4.12
            fi

            # Could be anything really....  e.g. 0.0.0.0/0,::0/0
            if [ "$(awk '/^AllowedIPs/ {print $3}' ${CONFIG_DIR}${VPN_ID}.conf | grep -oF "0.0.0.0/0")" == "0.0.0.0/0" ];then
                if [ -n "$PEER_DNS" ];then
                    if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.09
                        iptables -t nat -A WGDNS$VPN_NUM -s ${LAN_SUBNET}.0/24 -j DNAT --to-destination $PEER_DNS -m comment --comment "WireGuard 'client${VPN_NUM} DNS'" # v4.05
                    else
                        iptables -t nat -A WGDNS$WG_INTERFACE -s ${LAN_SUBNET}.0/24 -j DNAT --to-destination $PEER_DNS -m comment --comment "WireGuard 'client${WG_INTERFACE} DNS'" # v4.09
                    fi
                fi
            fi
        else
            #ip rule add from $(nvram get lan_ipaddr | cut -d"." -f1-3).0/24 table 12$VPN_NUM prio 99$VPN_NUM"9"
            if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.09
                VPN_IP_LIST=$(sqlite3 $SQL_DATABASE "SELECT * FROM policy WHERE peer='$WG_INTERFACE';")
                create_client_list
            else
                echo -e "\a\n\t";logger -st "wireguard-{$MODE}${VPN_NAME}" "Policy mode not supported for non 'wg1*' prefix '$MODE' Peer '$WG_INTERFACE'"
                echo -e
            fi

            # Ipsets ?
            if [ -n "$(sqlite3 $SQL_DATABASE "SELECT ipset FROM ipset WHERE peer='${WG_INTERFACE}';")" ];then

                IPSETS=$(sqlite3 $SQL_DATABASE "SELECT ipset FROM ipset WHERE peer='${WG_INTERFACE}';" | tr '\n' ' ')
                for IPSET in $IPSETS
                    do
                        ipset list $IPSET >/dev/null 2>&1;if [ $? -eq 0 ]; then
                            DSTSRC=$(sqlite3 $SQL_DATABASE "SELECT dstsrc FROM ipset WHERE ipset='$IPSET' AND peer='${WG_INTERFACE}';")
                            FWMARK=$(sqlite3 $SQL_DATABASE "SELECT fwmark FROM ipset WHERE ipset='$IPSET' AND peer='${WG_INTERFACE}';")

                            TAG_MARK=$(sqlite3 /opt/etc/wireguard.d/WireGuard.db "select fwmark from fwmark where peer='${WG_INTERFACE}';") # v4.12                                                                                                             # v4.12
                            ip rule del from 0/0 fwmark $TAG_MARK"/"$TAG_MARK table 12$VPN_NUM prio 999$VPN_NUM 2>/dev/null                 # v4.12
                            ip rule add from 0/0 fwmark $TAG_MARK"/"$TAG_MARK table 12$VPN_NUM prio 999$VPN_NUM                             # v4.12
                            echo 0 >/proc/sys/net/ipv4/conf/$WG_INTERFACE/rp_filter                                                         # v4.12

                            if [ "$USE_IPV6" != "Y" ];then                  # v4.08
                                iptables -t mangle -D PREROUTING -m set --match-set $IPSET $DSTSRC -j MARK --set-mark ${FWMARK}/${FWMARK} -m comment --comment "WireGuard 'client'" 2>/dev/null # v4.12
                                iptables -t mangle -A PREROUTING -m set --match-set $IPSET $DSTSRC -j MARK --set-mark ${FWMARK}/${FWMARK} -m comment --comment "WireGuard 'client'"             # v4.12
                            else
                                ip6tables -t mangle -D PREROUTING -m set --match-set $IPSET $DSTSRC -j MARK --set-mark ${FWMARK}/${FWMARK} -m comment --comment "WireGuard 'client'" 2>/dev/null    # v4.12
                                ip6tables -t mangle -A PREROUTING -m set --match-set $IPSET $DSTSRC -j MARK --set-mark ${FWMARK}/${FWMARK} -m comment --comment "WireGuard 'client'"                # v4.12
                            fi
                            logger -t "wireguard-${MODE}${VPN_NAME}" "Adding IPSet '$IPSET' route through VPN 'client' Peer" $WG_INTERFACE
                        else
                            logger -t "wireguard-${MODE}${VPN_NAME}" "***ERROR IPSet '$IPSET' does NOT EXIST! for routing through VPN 'client' Peer "$WG_INTERFACE
                        fi
                    done
            fi



        fi

        if [ "$USE_IPV6" != "Y" ];then                                      # v4.08
            ip route add 0/1   dev $VPN_ID table 12$VPN_NUM 2>/dev/null
            ip route add 128/1 dev $VPN_ID table 12$VPN_NUM 2>/dev/null
        else
            ip -6 route add ::/1     dev $VPN_ID table 12$VPN_NUM 2>/dev/null   # v4.12
            ip -6 route add 8000::/1 dev $VPN_ID table 12$VPN_NUM 2>/dev/null   # v4.12
        fi
        #ip route add default dev $VPN_ID table 12$VPN_NUM 2>/dev/null      # v4.03

        if [ "$USE_IPV6" != "Y" ];then                                      # v4.08
            ip route add $(echo $LOCALIP | cut -d"." -f1-3).0/24 dev $VPN_ID  proto kernel  scope link  src $LOCALIP 2>/dev/null
            ip route show table main dev $(nvram get lan_ifname) | while read ROUTE
                do
                    if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.09
                        ip route add table 12$VPN_NUM $ROUTE dev $(nvram get lan_ifname) 2>/dev/null
                    else
                        ip route add table 120 $ROUTE dev $(nvram get lan_ifname) 2>/dev/null   # v4.10
                    fi
                done

            ip route show table main dev $VPN_ID | while read ROUTE
                do
                    if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.10
                        ip route add table 12$VPN_NUM $ROUTE dev $VPN_ID 2>/dev/null
                    else
                        ip route add table 120 $ROUTE dev $(nvram get lan_ifname) 2>/dev/null   # v4.10
                    fi

                done
        else

            ip -6 route add $(echo $LOCALIP | sed 's/::/|/' | cut -d"|" -f1)::0/64 dev $VPN_ID  proto kernel  scope link  src $LOCALIP 2>/dev/null      # v4.11
            ip -6 route show table main dev $(nvram get lan_ifname) | while read ROUTE
                do
                    if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.10
                        ip -6 route add table 12$VPN_NUM $ROUTE dev $(nvram get lan_ifname) 2>/dev/null
                    else
                        ip -6 route add table 120 dev $(nvram get lan_ifname) 2>/dev/null
                    fi
                done

            ip -6 route show table main dev $VPN_ID | while read ROUTE
                do
                    if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.09
                        ip -6 route add table 12$VPN_NUM $ROUTE dev $VPN_ID 2>/dev/null
                    else
                        ip -6 route add table 120 dev $VPN_ID 2>/dev/null   # v4.09
                    fi
                done
        fi

        Firewall_delete

        # PASSTHRU ?
        Manage_Passthru

        # User Exit @ZebMcKayhan
        [ -f ${INSTALL_DIR}Scripts/${VPN_ID}-up.sh ] && { logger -t "wireguard-${MODE}${VPN_NAME}" "Executing Event:${VPN_ID}-up.sh"; sh ${INSTALL_DIR}Scripts/${VPN_ID}-up.sh; }
        if [ "$USE_IPV6" != "Y" ];then                                      # v4.08
            iptables -t mangle -I FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'client'"
            iptables -t mangle -I FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'client'"
            iptables -t mangle -I FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'client'"
            iptables -t mangle -I PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'client'"

            if [ $FIRMWARE -ge 38601 ]  && [ -n "$(brctl show | grep -E "\.50[1-2]")" ];then         # Allow Guest #1 SSID VLANs SNB @ZebMcKayhan
                iptables -t filter -I FORWARD -i br1 -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard Guest_VLAN"
                iptables -t filter -I FORWARD -i br2 -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard Guest_VLAN"
                iptables -t nat -I POSTROUTING -s $(nvram get lan_ipaddr)/16 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'"
            else
                iptables -t nat -I POSTROUTING -s $(nvram get lan_ipaddr)/24 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'"
            fi

            if [ -n "$PEER_DNS" ];then
                if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.10
                    iptables -t nat -I PREROUTING -p tcp -m tcp --dport 53 -j WGDNS${VPN_NUM} -m comment --comment "WireGuard 'client${VPN_NUM} DNS'"
                    iptables -t nat -I PREROUTING -p udp -m udp --dport 53 -j WGDNS${VPN_NUM} -m comment --comment "WireGuard 'client${VPN_NUM} DNS'"
                else
                    iptables -t nat -I PREROUTING -p tcp -m tcp --dport 53 -j WGDNS${WG_INTERFACE} -m comment --comment "WireGuard 'client${WG_INTERFACE} DNS'"
                    iptables -t nat -I PREROUTING -p udp -m udp --dport 53 -j WGDNS${WG_INTERFACE} -m comment --comment "WireGuard 'client${WG_INTERFACE} DNS'"
                fi
            fi
        else
            ip6tables -t mangle -I FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'client'"
            ip6tables -t mangle -I FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'client'"
            ip6tables -t mangle -I FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'client'"
            ip6tables -t mangle -I PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'client'"

            if [ $FIRMWARE -ge 38601 ]  && [ -n "$(brctl show | grep -E "\.50[1-2]")" ];then         # Allow Guest #1 SSID VLANs SNB @ZebMcKayhan
                ip6tables -t filter -I FORWARD -i br1 -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard Guest_VLAN"
                ip6tables -t filter -I FORWARD -i br2 -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard Guest_VLAN"
                ip6tables -t nat -I POSTROUTING -s $(nvram get lan_ipaddr)/16 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'"
            else
                ip6tables -t nat -I POSTROUTING -s $(nvram get lan_ipaddr)/24 -o $VPN_ID -j MASQUERADE -m comment --comment "WireGuard 'client'"
            fi

        fi

            # Shouldn't fire as I use '-t nat WGDNSx' chain
            if [ "$wgdns" != "" ] && [ ! -f /tmp/resolv.dnsmasq_backup.$WG_INTERFACE ]; then {
                    cp /tmp/resolv.dnsmasq /tmp/resolv.dnsmasq_backup..$WG_INTERFACE 2>/dev/null
                            echo "server=$wgdns" > /tmp/resolv.dnsmasq
                            service restart_dnsmasq
                    }
            fi

        echo -en $cBGRE"\t"
        logger -st "wireguard-${MODE}${VPN_NAME}" "Initialisation complete."
        echo -e $cRESET
    else
        echo -e "\a\n\t";logger -st "wireguard-{$MODE}${VPN_NAME}" "Local Peer I/P endpoint ('${INSTALL_DIR}WireguardVPN.conf') not VALID. ABORTing Initialisation."
        echo -e
    fi
else

    # User Exit @Torson
    [ -f ${INSTALL_DIR}Scripts/${VPN_ID}-route-down.sh ] && { logger -t "wireguard-${MODE}${VPN_NAME}" "Executing Event:${VPN_ID}-route-down.sh"; sh ${INSTALL_DIR}Scripts/${VPN_ID}-route-down.sh; }

    # If Policy mode, then there was no default route
    if [ -z "$POLICY_MODE" ];then                                   # v4.06
        if [ "$USE_IPV6" != "Y" ];then                              # v4.08
            ip route del 0.0.0.0/1   dev $VPN_ID   2>/dev/null
            ip route del 128.0.0.0/1 dev $VPN_ID   2>/dev/null
        else
            ip -6 route del ::/1     dev $VPN_ID   2>/dev/null      # v4.12
            ip -6 route del 8000::/1 dev $VPN_ID   2>/dev/null      # v4.12
        fi

        # Set the default to the last ACTIVE WireGuard interface where the default route is required.
        # 'wg show interfaces' returns  list of Peers orfered oldest -> latest, so reverse the list so we travers latest -> oldest
        for WG_IFACE in $(wg show interfaces | grep -E "wg1|wg0" | awk '{do printf "%s"(NF>1?FS:RS),$NF;while(--NF)}')      # v4.07
                do
                    [ "$WG_IFACE" == "$WG_INTERFACE" ] && continue
                    if [ -n "$(awk '/^AllowedIPs/ {print $3}' ${CONFIG_DIR}${WG_IFACE}.conf | grep -oE "0.0.0.0/0|::0/0")" ];then   # v4.07
                        if [ "$(sqlite3 $SQL_DATABASE "SELECT auto FROM clients where peer='$WG_IFACE';")" != "P" ];then
                            if [ "$USE_IPV6" != "Y" ];then                                      # v4.08
                                ip route add 0/1    dev $WG_IFACE  2>/dev/nul
                                ip route add 128/1  dev $WG_IFACE  2>/dev/null
                            else
                                ip -6 route add ::/1       dev $WG_IFACE  2>/dev/null   # v4.12
                                ip -6 route add 8000::/1   dev $WG_IFACE  2>/dev/null   # v4.12

                            fi
                            break
                        fi
                    fi
                done
    fi

    if [ "$USE_IPV6" != "Y" ];then                                      # v4.08
        ip link del dev $VPN_ID 2>/dev/null
    else
        ip -6 link del dev $VPN_ID 2>/dev/null
    fi

    TIMESTAMP=$(date +%s)
    sqlite3 $SQL_DATABASE "INSERT into session values('$WG_INTERFACE','End','$TIMESTAMP');" # v1.08
    sqlite3 $SQL_DATABASE "INSERT into traffic values('$WG_INTERFACE','$TIMESTAMP','*','*','*','*');"   # 4.12 @ZebMcKayhan

    Firewall_delete

    if [ "$USE_IPV6" != "Y" ];then                                      # v4.08
        if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.10
            ip rule del from $(nvram get lan_ipaddr | cut -d"." -f1-3).0/24 table 12$VPN_NUM prio 992$VPN_NUM   2>/dev/null

            ip route flush table 12$VPN_NUM 2>/dev/null
            ip rule del prio 992$VPN_NUM    2>/dev/null

            purge_client_list                                           # v4.09

            ip route flush cache
        fi

    else
        if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.10
            ip -6 rule del from $(nvram get lan_ipaddr | sed 's/::/|/' | cut -d"|" -f1)::0/24 table 12$VPN_NUM prio 992$VPN_NUM   2>/dev/null # v4.11

            ip -6 route flush table 12$VPN_NUM 2>/dev/null
            ip -6 rule del prio 992$VPN_NUM    2>/dev/null
            ip -6 route flush cache
        fi
    fi

    IPSETS=$(sqlite3 $SQL_DATABASE "SELECT ipset FROM ipset WHERE peer='${WG_INTERFACE}';" | tr '\n' ' ')
    for IPSET in $IPSETS
        do
            DSTSRC=$(sqlite3 $SQL_DATABASE "SELECT dstsrc FROM ipset WHERE ipset='$IPSET' AND peer='${WG_INTERFACE}';")
            FWMARK=$(sqlite3 $SQL_DATABASE "SELECT fwmark FROM ipset WHERE ipset='$IPSET' AND peer='${WG_INTERFACE}';")
            TAG_MARK=$(sqlite3 /opt/etc/wireguard.d/WireGuard.db "select fwmark from fwmark where peer='${WG_INTERFACE}';") # v4.12                                                                                                             # v4.12
            ip rule del from 0/0 fwmark $TAG_MARK"/"$TAG_MARK table 12$VPN_NUM prio 999$VPN_NUM 2>/dev/null                 # v4.12

            if [ "$USE_IPV6" != "Y" ];then                                      # v4.08
                iptables -t mangle -D PREROUTING -m set --match-set $IPSET $DSTSRC -j MARK --set-mark ${FWMARK}/${FWMARK} -m comment --comment "WireGuard 'client'" 2>/dev/null # v4.12
            else
                ip6tables -t mangle -D PREROUTING -m set --match-set $IPSET $DSTSRC -j MARK --set-mark ${FWMARK}/${FWMARK} -m comment --comment "WireGuard 'client'" 2>/dev/null    # v4.12
            fi
            logger -t "wireguard-${MODE}${VPN_NAME}" "Removing IPSet '$IPSET' routing through VPN 'client' Peer" $WG_INTERFACE
        done

        # PASSTHRU ?
        Manage_Passthru "del"

    # User Exit @ZebMcKayhan
    [ -f ${INSTALL_DIR}Scripts/${VPN_ID}-down.sh ] && { logger -t "wireguard-${MODE}${VPN_NAME}" "Executing Event:${VPN_ID}-down.sh"; sh ${INSTALL_DIR}Scripts/${VPN_ID}-down.sh; }

    #mv /tmp/resolv.dnsmasq_backup.$WG_INTERFACE /tmp/resolv.dnsmasq 2>/dev/null
    #service restart_dnsmasq 2>&1 1>/dev/null
    if [ "$USE_IPV6" != "Y" ];then                                      # v4.08
        if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.10
            iptables -t nat -F WGDNS$VPN_NUM 2>/dev/null                # v4.05
            iptables -t nat -X WGDNS$VPN_NUM 2>/dev/null                # v4.05
        else
            iptables -t nat -F WGDNS$WG_INTERFACE 2>/dev/null           # v4.09
            iptables -t nat -X WGDNS$WG_INTERFACE 2>/dev/null           # v4.09
        fi
    # else
        # if [ -n "$(echo "$VPN_NUM" | grep -oE '^[0-9]+$')" ]; then      # v4.10
            # ip6tables -t nat -F WGDNS$VPN_NUM 2>/dev/null               # v4.05
            # ip6tables -t nat -X WGDNS$VPN_NUM 2>/dev/null               # v4.05
        # else
            # ip6tables -t nat -F WGDNS$WG_INTERFACE 2>/dev/null          # v4.10
            # ip6tables -t nat -X WGDNS$WG_INTERFACE 2>/dev/null          # v4.0
        # fi
    fi

    logger -t "wireguard-${MODE}${VPN_NAME}" "Wireguard VPN '$MODE' Peer ($VPN_ID) $TXT $SOCKET ($DESC) Terminated"
    echo -e $cBGRE"\twireguard-${MODE}${VPN_NAME}: Wireguard VPN '$MODE' Peer (${cBMAG}$VPN_ID${cBGRE}) $TXT $SOCKET (${cBMAG}$DESC${cBGRE}) ${cBRED}Terminated"$cRESET
    echo -e $cRESET
fi

############################################################################EIC Hack 3 of 3####################################
#) 2>&1 | logger -t $(basename $0)"[$$_***DEBUG]"
###############################################################################################################################

exit

