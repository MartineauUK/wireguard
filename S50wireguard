#!/bin/sh
VERSION="v1.04"
#============================================================================================ © 2021 Martineau v1.04
#
#       S50wireguard   {start|stop|restart|check|CreateConfig} [ [client [policy] |server]} [wg_instance] ]
#
#       S50wireguard   start 0
#                      Initialises remote peer 'client' 'wg0'
#       S50wireguard   start client 0
#                      Initialises remote peer 'client' 'wg0'
#       S50wireguard   start 1
#                      Initialises local peer 'server' 'wg1'
#       S50wireguard   start server 1
#                      Initialises local peer 'server' 'wg21'
#       S50wireguard   start client 1
#                      Initialises remote peer 'client' 'wg11' uses interface naming convention as per OpenVPN e.g. tun11
#       S50wireguard   start client 1 policy
#                      Initialises remote peer 'client' 'wg11' in 'policy' Selective Routing mode
#       S50wireguard   stop client 3
#                      Terminates remote peer 'client' 'wg13'
#       S50wireguard   stop 1
#       S50wireguard   restart SGS8
#                      Restart legacy-named Peer and auto-detect if it's a 'client' or 'server'
#

# Maintainer: Martineau
# Last Updated Date: 03-Mar-2021
#
# Description:
#
# Acknowledgement:
#
# Contributors: odkrys

GIT_REPO="wireguard"
GITHUB_MARTINEAU="https://raw.githubusercontent.com/MartineauUK/$GIT_REPO/main"
GITHUB_MARTINEAU_DEV="https://raw.githubusercontent.com/MartineauUK/$GIT_REPO/dev"
GITHUB_DIR=$GITHUB_MARTINEAU                       # default for script
CONFIG_DIR="/opt/etc/wireguard/"
CHECK_GITHUB="1"
SILENT="s"                                         # Default is no progress messages for file downloads




#Mode=client   #server or client

#server
#export Subnet=   #e.g.)10.50.50.1/24
#export wgport=

#client
#export LocalIP=  #e.g.)10.50.50.2

#Route=default   #default or policy
#export wgdns=
#export Nipset=wgvpn

Say(){
   echo -e $$ $@ | logger -st "($(basename $0))"
}
SayT(){
   echo -e $$ $@ | logger -t "($(basename $0))"
}
# shellcheck disable=SC2034
ANSIColours() {
    cRESET="\e[0m";cBLA="\e[30m";cRED="\e[31m";cGRE="\e[32m";cYEL="\e[33m";cBLU="\e[34m";cMAG="\e[35m";cCYA="\e[36m";cGRA="\e[37m"
    cBGRA="\e[90m";cBRED="\e[91m";cBGRE="\e[92m";cBYEL="\e[93m";cBBLU="\e[94m";cBMAG="\e[95m";cBCYA="\e[96m";cBWHT="\e[97m"
    aBOLD="\e[1m";aDIM="\e[2m";aUNDER="\e[4m";aBLINK="\e[5m";aREVERSE="\e[7m"
    cWRED="\e[41m";cWGRE="\e[42m";cWYEL="\e[43m";cWBLU="\e[44m";cWMAG="\e[45m";cWCYA="\e[46m";cWGRA="\e[47m"
}
# Print between line beginning with'#==' to first blank line inclusive
ShowHelp() {
    echo -en $cBWHT >&2
    awk '/^#==/{f=1} f{print; if (!NF) exit}' $0
    echo -en $cRESET >&2
}
Is_HND() {
    # Use the following at the command line otherwise 'return X' makes the SSH session terminate!
    #[ -n "$(uname -m | grep "aarch64")" ] && echo Y || echo N
    [ -n "$(uname -m | grep "aarch64")" ] && { echo Y; return 0; } || { echo N; return 1; }
}
Is_AX() {
    # Kernel is '4.1.52+' (i.e. isn't '2.6.36*') and it isn't HND
    # Use the following at the command line otherwise 'return X' makes the SSH session terminate!
    # [ -n "$(uname -r | grep "^4")" ] && [ -z "$(uname -m | grep "aarch64")" ] && echo Y || echo N
    [ -n "$(uname -r | grep "^4")" ] && [ -z "$(uname -m | grep "aarch64")" ] && { echo Y; return 0; } || { echo N; return 1; }
}
Get_Router_Model() {

    # Contribution by @thelonelycoder as odmpid is blank for non SKU hardware,
    local HARDWARE_MODEL
    [ -z "$(nvram get odmpid)" ] && HARDWARE_MODEL=$(nvram get productid) || HARDWARE_MODEL=$(nvram get odmpid)

    echo $HARDWARE_MODEL

    return 0
}
download_file() {

        local DIR="$1"
        local FILE="$2"

        local GITHUB="$3"
        local GITHUB_BRANCH="$4"

        case $GITHUB in
            martineau)
                [ "$GITHUB_BRANCH" != "dev" ] && GITHUB_DIR=$GITHUB_MARTINEAU || GITHUB_DIR=$GITHUB_MARTINEAU_DEV
            ;;
        esac

        [ "$GITHUB_BRANCH" == "dev" ] && local DEVTXT=${cRESET}$cWRED"Github 'dev/development' branch"$cRESET || local DEVTXT=

        STATUS="$(curl --retry 3 -L${SILENT} -w '%{http_code}' "$GITHUB_DIR/$FILE" -o "$DIR/$FILE")"
        if [ "$STATUS" -eq "200" ]; then
            [ -n "$(echo "$@" | grep -F "dos2unix")" ] && dos2unix $DIR/$FILE
            printf '\t%b%s%b downloaded successfully %b\n' "$cBGRE" "$FILE" "$cRESET" "$DEVTXT"

        else
            printf '\n%b%s%b download FAILED with curl error %s\n\n' "\n\t\a$cBMAG" "'$FILE'" "$cBRED" "$STATUS"
            echo -e $cRESET"\a\n"

            exit 1
        fi
}
Check_Version_Update() {
    if [ $CHECK_GITHUB -eq 1 ];then

        GITHUB_DIR=$GITHUB_MARTINEAU

        local localmd5="$(md5sum "$0" | awk '{print $1}')"

        if [ "$1" != "nochk" ];then
            local REMOTE_VERSION_NUMDOT="$(curl -${SILENT}fLN --retry 3 --connect-timeout 3 "${GITHUB_DIR}/S50wireguard" | grep -E "^VERSION\=" | tr -d '"' | sed 's/VER.*\=//')" || REMOTE_VERSION_NUMDOT="?.??"   # v3.23
            if [ -z "$REMOTE_VERSION_NUMDOT" ] || [ "$REMOTE_VERSION_NUMDOT" == "?.??" ];then
                echo -e ${cRESET}$cRED_"\a\t***ERROR Unable to verify Github version...check DNS/Internet access!\n\n"$cRESET
                local REMOTE_VERSION_NUMDOT=
            else
                [ "$1" != "nochk" ] && remotemd5="$(curl -${SILENT}fL  --retry 3 --connect-timeout 3 "${GITHUB_DIR}/S50wireguard" | md5sum | awk '{print $1}')"
                local REMOTE_VERSION_NUM=$(echo $REMOTE_VERSION_NUMDOT | sed 's/[^0-9]*//g')
            fi
        fi

        local LOCAL_VERSION_NUMDOT=$VERSION                                     # v1.03
        local LOCAL_VERSION_NUM=$(echo $VERSION | sed 's/[^0-9]*//g')

        local CHANGELOG="$cRESET(${cBCYA}Change Log: ${cBYEL}https://github.com/MartineauUK/${GIT_REPO}/commits/main/S50wireguard$cRESET)"
        [ -n "$(echo $VERSION | grep "b")" ] && local CHANGELOG="$cRESET(${cBCYA}Change Log: ${cBYEL}https://github.com/MartineauUK/${GIT_REPO}/commits/dev/S50wireguard$cRESET)"

        # As the developer, I need to differentiate between the GitHub md5sum hasn't changed, which means I've tweaked it locally
        if [ -n "$REMOTE_VERSION_NUMDOT" ];then
            [ ! -f ${CONFIG_DIR}S50wireguard.md5 ] && echo $remotemd5 > ${CONFIG_DIR}S50wireguard.md5
        fi

        [ -z "$REMOTE_VERSION_NUM" ] && REMOTE_VERSION_NUM=0

        # Local Version higher than GitHub version or MD5 Mismatch due to local development?
        if [ ${REMOTE_VERSION_NUM:0:3} -lt ${LOCAL_VERSION_NUM:0:3} ] || [ "$(echo "$VERSION" | grep -om1 "b")" == "b" ] || [ $REMOTE_VERSION_NUM -lt $LOCAL_VERSION_NUM ] || { [ "$(awk '{print $1}' ${CONFIG_DIR}S50wireguard.md5)" == "$remotemd5" ]; } && [ "$localmd5" != "$remotemd5" ];then  # v1.03
            local VERSION=$LOCAL_VERSION_NUMDOT                             # v1.03
            if [ $REMOTE_VERSION_NUM -lt $LOCAL_VERSION_NUM ];then
                ALLOWUPGRADE="N"
                UPDATE_SCRIPT_ALERT="$(printf '%b[✔] Push to Github PENDING for %b(Major) %b%s%b UPDATE %b%s%b >>>> %b%s\n' "${cGRE}" "${cBGRE}" "$cRESET" "$(basename $0)" "$cBRED" "$cBMAG" "$VERSION" "$cRESET" "$cBGRE" "$REMOTE_VERSION_NUMDOT")"
            else
                ALLOWUPGRADE="N"
                UPDATE_SCRIPT_ALERT="$(printf '%b[✔] Push to Github PENDING for %b(Minor Hotfix) %b%s update >>>> %b%s %b%s\n' "${cGRE}" "$cBRED" "$cBGRE" "$cRESET" "$(basename $0)" "$cRESET" "$cBMAG" "$VERSION")"
            fi
        else
            if [ "$localmd5" != "$remotemd5" ]; then
                if [ $REMOTE_VERSION_NUM -ge $LOCAL_VERSION_NUM ];then
                    if [ $REMOTE_VERSION_NUM -gt $LOCAL_VERSION_NUM ];then
                        local UPDATE_SCRIPT_ALERT="$(printf '%bu%b  = %bUpdate (Major) %b%s %b%s -> %b %s\n' "${cBYEL}" "${cRESET}" "$cBGRE" "$cRESET" "$(basename $0)" "$cBMAG" "$VERSION" "$REMOTE_VERSION_NUMDOT" "$CHANGELOG")"
                    else
                        local UPDATE_SCRIPT_ALERT="$(printf '%bu%b  = %bUpdate (Minor Hotfix) %b%s %b%s -> %b %s\n' "${cBYEL}" "${cRESET}" "$cBGRE" "$cRESET" "$(basename $0)" "$cBMAG" "$VERSION" "$REMOTE_VERSION_NUMDOT" "$CHANGELOG")"
                    fi
                fi
            fi
        fi
    fi

    if [ -n "$UPDATE_SCRIPT_ALERT" ];then                                                       # v1.03
        echo -e "\a\n\t"$UPDATE_SCRIPT_ALERT"\n"
        [ -n "$(echo "$UPDATE_SCRIPT_ALERT" | grep -o "Push to Github")" ] && return 2 || return 1 # v1.03
    else
        echo -e $cBGRE"\n\tNo updates available - you have the latest version"              # v1.03
        return 0
    fi

}
Download_Modules() {                                                    # v1.03
_Get_File() {
    local WEBFILE=$1
    [ -z "$2" ] && echo -e $cBCYA"\n\tDownloading WireGuard Kernel module ${cBWHT}'$WEBFILE'$cBCYA for $ROUTER (v$BUILDNO)..."$cRESET
    echo -e $cBGRA
    curl -# -fL --retry 3 https://github.com/odkrys/entware-makefile-for-merlin/raw/main/${WEBFILE} -o ${DIR}${WEBFILE}
}
    local ROUTER=$1
    local DIR="/tmp/wireguard/"

    [ ! -d $DIR ] && mkdir $DIR

    local WEBFILE_NAMES=$(curl -${SILENT}fL https://www.snbforums.com/threads/experimental-wireguard-for-hnd-platform-4-1-x-kernels.46164/ | grep "<a href=.*odkrys.*wireguard" | grep -oE "wireguard.*" | sed 's/\"//g' | tr '\n' ' ')

    # The file list MAY NOT ALWAYS be in the correct Router Model order for the following 'case' statement?
    case $ROUTER in

        RT-AC86U|GT-AC2900)     # RT-AC86U, GT-AC2900 - 4.1.27
            _Get_File "$(echo "$WEBFILE_NAMES" | awk '{print $1}')"
            ;;
        RT-AX88U|GT-AX11000)    # RT-AX88U, GT-AX11000 - 4.1.51
            _Get_File "$(echo "$WEBFILE_NAMES" | awk '{print $2}')"
            ;;
        RT-AX68U|RT-AX86U)      # RT-AX68U, RT-AX86U - 4.1.52
            _Get_File "$(echo "$WEBFILE_NAMES" | awk '{print $3}')"
            ;;
        *)
            echo -e $cBRED"\a\n\t***ERROR: Unable to find WireGuard Kernel module for $ROUTER (v$BUILDNO)\n"$cRESET
            # Deliberately Download an incompatible file simply so that an error message is produced by 'opkg install*.ipk'
            #
            #       Unknown package 'wireguard-kernel'.
            #       Collected errors:
            #        * pkg_hash_fetch_best_installation_candidate: Packages for wireguard-kernel found, but incompatible with the architectures configured
            #        * opkg_install_cmd: Cannot install package wireguard-kernel.
            #
            #
            _Get_File "$(echo "$WEBFILE_NAMES" | awk '{print $1}')"
            ROUTER_COMPATIBLE="N"
            ;;
    esac

# User Space Tools
WEBFILE=$(echo "$WEBFILE_NAMES" | awk '{print $4}')
echo -e $cBCYA"\n\tDownloading WireGuard User space Tools$cBWHT '$WEBFILE'$cBCYA for $ROUTER (v$BUILDNO)"$cRESET
_Get_File  "$WEBFILE" "NOMSG"
}
Load_Module_UserspaceTool() {                                           # v1.03
    if [ ! -d /tmp/wireguard ];then
        echo -e $cRED"\a\n\tNo modules found - '/tmp/wireguard doesn't exist'\n"
        echo -e "\tPress$cBRED y$cRESET to$cBRED DOWNLOAD WireGuard Kernel and Userspace Tools modules ${cRESET} or press$cBGRE [Enter] to SKIP."
            read -r "ANS"
            if [ "$ANS" == "y" ];then
                Download_Modules $HARDWARE_MODEL
            fi
    fi

    STATUS=0
    echo -e $cBCYA"\n\tLoading WireGuard Kernel module and Userspace Tools for $HARDWARE_MODEL (v$BUILDNO)\n"$cRESET
    for MODULE in $(ls /tmp/wireguard/*.ipk)
        do
            opkg install $MODULE
            if [ $? -eq 0 ];then
                cp $MODULE  ${CONFIG_DIR}                   # v1.03
                MODULE_NAME=$(echo "$(basename $MODULE)" | sed 's/_.*$//')
                md5sum $MODULE > ${CONFIG_DIR}$MODULE_NAME".md5"
                sed -i 's~/tmp/wireguard/~~' ${CONFIG_DIR}$MODULE_NAME".md5"
            else
                STATUS=0
            fi
        done

    if [ "$STATUS" -eq 0 ];then
        insmod /opt/lib/modules/wireguard 2>/dev/null

        echo -e $cBGRA"\t"$(dmesg | grep -a "WireGuard")
        echo -e $cBGRA"\t"$(dmesg | grep -a "wireguard: Copyright")"\n"$cRESET
        return 0
    else
        echo -e $cBRED"\a\n\t***ERROR: Unable to DOWNLOAD WireGuard Kernel and Userspace Tools modules\n"
        return 1
    fi

}
Show_MD5() {
    echo -e $cBCYA"\tMD5="$(awk '{print $0}' ${CONFIG_DIR}wireguard-kernel.md5)
    echo -e $cBCYA"\tMD5="$(awk '{print $0}' ${CONFIG_DIR}wireguard-tools.md5)
}
Check_Module_Versions() {

    local FILES=$(curl -${SILENT}fL https://www.snbforums.com/threads/experimental-wireguard-for-hnd-platform-4-1-x-kernels.46164/ | grep "<a href=.*odkrys.*wireguard" | sed 's/"//g; s/\n/ /g' | grep -oE "wireguard.*")

    local UPDATES="N"

    # Check if Kernel and User Tools Update available
    echo -e $cBWHT"\tChecking for WireGuard Kernel and Userspace Tool updates..."

    echo -e $cBGRA"\t"$(dmesg | grep -a "WireGuard")
    echo -e $cBGRA"\t"$(dmesg | grep -a "wireguard: Copyright")"\n"$cRESET

    # Without a BOOT, there may be a mismatch
    local BOOTLOADED=$(dmesg | grep -a WireGuard | awk '{print $3}')
    local WGKERNEL=$(opkg list-installed | grep "wireguard-kernel" | awk '{print $3}' | sed 's/\-.*$//')
    local WGTOOLS=$(opkg list-installed | grep "wireguard-tools" | awk '{print $3}' | sed 's/\-.*$//')

    if [ -n "$WGKERNEL" ];then                  # v1.04
        [ "$WGKERNEL" != "$BOOTLOADED" ] && echo -e $cRED"\a\n\tWarning Reboot required for (dmesg) WireGuard $WGKERNEL $BOOTLOADED\n"
    fi

    Show_MD5
    [ -z "$(echo "$FILES" | grep -F "$WGKERNEL")" ] && { echo -e $cBYEL"\t\tKernel UPDATE available" $FILE; local UPDATES="Y"; }
    [ -z "$(echo "$FILES" | grep -F "$WGTOOLS")" ] && { echo -e $cBYEL"\t\tUserspace Tools UPDATE available" $FILE; local UPDATES="Y"; }

    if [ "$UPDATES" == "Y" ];then
        echo -e $cRESET"\n\tPress$cBRED y$cRESET to$cBRED Update WireGuard Kernel and Userspace Tools${cRESET} or press$cBGRE [Enter] to SKIP."
        read -r "ANS"
        if [ "$ANS" == "y" ];then
            Download_Modules $HARDWARE_MODEL
            Load_Module_UserspaceTool
        else
            echo -e $cBWHT"\n\tUpdate skipped\n"$cRESET
        fi
    else
        echo -e $cBWHT"\n\tWireGuard Kernel and Userspace Tool up to date.\n"$cRESET
    fi
}
Create_Sample_Config() {

    if [ -f /jffs/configs/WireguardVPN_map ];then
        echo -e $cBYEL"\a\n\tWarning: WireGuard configuration file '/jffs/configs/WireguardVPN_map' already exists!...renamed to 'WireguardVPN_map.$TS'"
        mv /jffs/configs/WireguardVPN_map /jffs/configs/WireguardVPN_map.$TS
    fi
    echo -e $cBGRE"\a\n\tCreating WireGuard configuration file '/jffs/configs/WireguardVPN_map'"


    cat > /jffs/configs/WireguardVPN_map << EOF
# NOTE: Auto=Y  Command 'S50wireguard start' will auto-start this Peer
#       Auto=P  Command 'S50wireguard start' will auto-start this Peer using it's Selective Routing RPDB Policy rules if defined e.g 'rp11'
#
#
# VPN   Auto   Local Peer IP         Remote Peer Socket     DNS               Annotation Comment
wg11    P      xxx.xxx.xxx.xxx/32    86.106.143.93:51820    193.138.218.74    # Mullvad USA, New York (maybe!)
wg12    N      xxx.xxx.xxx.xxx/32    209.58.188.180:51820   193.138.218.74    # Mullvad China, Hong Kong
wg13    N      xxx.xxx.xxx.xxx/32    103.231.88.18:51820    193.138.218.74    # Mullvad Oz, Melbourne
wg14    N      xxx.xxx.xxx.xxx/32    193.32.126.66:51820    193.138.218.74    # Mullvad France, Paris
wg15

wg21    Y      xxx.50.1.1/24                                                  # $HARDWARE_MODEL Local Host Peer 1
wg22    N      xxx.50.2.1/24                                                  # $HARDWARE_MODEL Local Host Peer 2

# The following default 'wg0' interface retained for backward compatibility!
wg0     N      xxx.xxx.xxx.xxx/32     86.106.143.93:51820    193.138.218.74    # Mullvad USA, New York

#       RPDB Selection Routing rules same format as 'nvram get vpn_clientX_clientlist'
#       < Desciption > Source IP/CIDR > [Target IP/CIDR] > WAN_or_VPN[...]
rp11    <Dummy VPN 3>172.16.1.3>>VPN<Plex>172.16.1.123>1.1.1.1>VPN<Router>172.16.1.1>>WAN<All LAN>172.16.1.0/24>>VPN
rp12
rp13
rp14
rp15    <Router>192.168.1.0/24>>VPN<LAN>192.168.1.1>>WAN

# Optionally define the 'server' Peer 'clients' so they can be identified by name in the enhanced WireGuard Peer status report
# Public Key                                      DHCP IP             Annotation Comment
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=      10.50.1.1           # A Cell phone
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=      10.50.1.88          # Samsung Galaxy S8
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=      10.50.2.22          # Dummy Device 1
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=      10.50.1.89          # Device iPhone12

EOF
    return 0
}

_quote() {
  echo "$1" | sed 's/[]\/()$*.^|[]/\\&/g'
}
Convert_Key() {
    local KEY="$1"
    #[ -n "$(echo "$1" | grep -F "/" )" ] && local KEY=$(_quote "$KEY")

    echo "$KEY"
}

#For verbose debugging, uncomment the following two lines, and uncomment the last line of this script
#set -x
#(
#==========================================================================================================================================
Main() { true; }            # Syntax that is Atom Shellchecker compatible!

PATH=/opt/sbin:/opt/bin:/opt/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

ANSIColours

FIRMWARE=$(echo $(nvram get buildno) | awk 'BEGIN { FS = "." } {printf("%03d%02d",$1,$2)}')
HARDWARE_MODEL=$(Get_Router_Model)
# v384.13+ NVRAM variable 'lan_hostname' supersedes 'computer_name'
[ -n "$(nvram get computer_name)" ] && MYROUTER=$(nvram get computer_name) || MYROUTER=$(nvram get lan_hostname)
BUILDNO=$(nvram get buildno)

TS=$(date +"%Y%m%d-%H%M%S")    # current date and time 'yyyymmdd-hhmmss'

if [ "$(nvram get ntp_ready)" = "0" ];then              # Ensure event 'restart_diskmon' triggers the actual start of WireGuard.
    FN="/jffs/scripts/service-event-end"
    [ ! -f $FN ] && { echo "#!/bin/sh" > $FN; chmod +x $FN; }
    [ -z "$(grep "wireguard" $FN)" ] && echo -e "if [ "\$2" = "diskmon" ]; then { sh /opt/etc/init.d/S50wireguard start & } ; fi # wireguard" >> $FN
    Say "$VERSION WireGuard delayed for NTP synch event trigger 'restart_diskmon' [$@]"
    exit 99
#else
    #Say "$VERSION $1 WireGuard NTP is Ready"
fi

ACTION=$1
TYPE=$2

# Non-standard SxxScript should normally call '. /opt/etc/init.d/rc.func'
[ "$(echo $2 | grep -o "post-mount")" == "post-mount" ] && shift

if [ -n "$(echo "start|stop|restart" | grep -o "$ACTION")" ];then

    if [ -z "$TYPE" ];then
        TYPE="client"
    else
        if [ -f "${CONFIG_DIR}${TYPE}.conf" ];then          # Is it an interface name? e.g. 'SGS8' or 'wg-client0'
            WG_INTERFACE=$TYPE
            [ -z "$(grep -E "^Endpoint" ${CONFIG_DIR}${WG_INTERFACE}.conf)" ] && TYPE="server" || TYPE="client"
        fi
    fi

    case "$TYPE" in
        server|1)
            Mode="server"
            if [ -z "$WG_INTERFACE" ];then
                if [ -z "$3" ];then
                    WG_INTERFACE="wg1"
                    export $WG_INTERFACE
                    export Subnet=10.50.1.1/24
                    export wgport=1150
                else
                    WG_INTERFACE="wg2"$3
                    export $WG_INTERFACE
                    export Subnet=10.50.$3.1/24
                    export wgport="115"$3
                fi
            fi
            ;;
        *)
            Mode=client

            if [ -z "$WG_INTERFACE" ];then
                if [ -z "$2" ] || [ "$2" == "0" ] || [ "$3" == "0" ];then
                    WG_INTERFACE="wg0"
                    export $WG_INTERFACE
                    #export LocalIP=10.160.107.63/8  # Martineau https://tunsafe.com/vpn  Account Number    57937020164277392089
                    Route=default
                else
                    if [ "$2" == "client" ];then
                        INDEX=$3
                    else
                        INDEX=$2
                    fi
                    case $INDEX in
                        1|2|3|4|5)
                                    WG_INTERFACE="wg1"$INDEX
                                    #export WG_INTERFACE=$WG_INTERFACE
                                    export Subnet=10.50.$INDEX.1/24
                                    export wgport="115"$INDEX

                    ;;
                    *)
                        echo -en $cRED"\a\n\t";Say "$VERSION Missing/Invalid VPN ID '$INDEX' e.g. range 0 - 5 ";echo -e $cRESET
                        exit 99
                    ;;
                    esac
                fi
            fi

            # Read the Remote peer config to set the LOCAL peer endpoint
            if [ -f /jffs/configs/WireguardVPN_map ];then
                LOCALIP=$(awk -v pattern="$WG_INTERFACE" 'match($0,"^"pattern) {print $2}' /jffs/configs/WireguardVPN_map)
                export LocalIP=$LOCALIP
                SOCKET=$(awk -v pattern="$WG_INTERFACE" 'match($0,"^"pattern) {print $4}' /jffs/configs/WireguardVPN_map)
                DESC=$(awk -v pattern="$WG_INTERFACE" 'match($0,"^"pattern) {print $0}' /jffs/configs/WireguardVPN_map | grep -oE "#.*$" | sed 's/^[ \t]*//;s/[ \t]*$//')
            fi

            if [ "$3" == "policy" ] || [ "$3" == "policy" ];then
                Route="policy"
            fi

            ;;
    esac

    case "$ACTION" in
        start)

            if [ -z "$2" ];then
                WG_INTERFACE=
                # The AUTO flag may be 'Y' or 'P' to indicate if auto policy is required
                AUTO_PEERS=$(awk '$2 == "Y" || $2 =="P" {print $1}' /jffs/configs/WireguardVPN_map| tr '\n#' ' ')
                echo -e
                [ -n "$AUTO_PEERS" ] && { Say "$VERSION Requesting WireGuard VPN Peer auto-start ($AUTO_PEERS)"; echo -e; }
            else
                echo -en $cBCYA
                Say "$VERSION Requesting WireGuard VPN '$Mode' Peer ('$WG_INTERFACE') $DESC."
                echo -en $cRESET
            fi

            for WG_INTERFACE in $AUTO_PEERS $WG_INTERFACE
                do
                    [ "$(awk -v pattern="$WG_INTERFACE" 'match($0,"^"pattern) {print $2}' /jffs/configs/WireguardVPN_map)" == "P" ] && Route="policy" || Route="default"

                    if [ -n "$(ifconfig | grep -E "^$WG_INTERFACE")" ];then
                        echo -en $cBWHT
                        Say "Initialising Wireguard VPN $MODE Peer ($VPN_ID) ${POLICY_MODE}${TXT} $SOCKET ($DESC)";echo -en $cRESET
                        echo -en $cRED"\a\t";Say "WireGuard VPN '$Mode' Peer ('$WG_INTERFACE') ALREADY ACTIVE";echo -e $cRESET
                    else
                        if [ -f ${CONFIG_DIR}${WG_INTERFACE}.conf ];then

                            # Rather than rely on naming convention; verify the content
                            [ -z "$(grep -E "^Endpoint" ${CONFIG_DIR}${WG_INTERFACE}.conf)" ] && Mode="server" || Mode="client"

                            if [ "$Mode" == "server" ] ; then
                                ${CONFIG_DIR}wg_server $WG_INTERFACE

                                elif [ "$Mode" == "client" ] && [ "$Route" != "policy" ] ; then
                                    ${CONFIG_DIR}wg_manager.sh $WG_INTERFACE
                                else
                                    ${CONFIG_DIR}wg_manager.sh $WG_INTERFACE "policy"
                            fi
                        else
                            echo -en $cBRED"\a\n\t";Say "WireGuard VPN '$Mode' Peer ('$WG_INTERFACE') config NOT found?....skipping start request"
                            echo -e $cRESET
                        fi

                    fi
                done
            echo -e $cBCYA"\tStatus:\n"$cRESET
            /opt/bin/wg show all
            ;;
        stop)

            #logger -s "Stopping WireGuard service."

            if [ -z "$2" ];then
                AUTO_PEERS=$(wg show interfaces)
                if [ -n "$AUTO_PEERS" ];then
                    WG_INTERFACE=
                    echo -en $cBWHT"\n";Say "$VERSION Requesting termination of Active WireGuard VPN Peers ($AUTO_PEERS)"
                    echo -e $cRESET
                else
                    echo -en $cRED"\a\n\t"
                    Say "No WireGuard VPN peers Active"
                    echo -e
                    exit 97
                fi
            fi

            for WG_INTERFACE in $AUTO_PEERS $WG_INTERFACE
                do
                    #${CONFIG_DIR}/wg-down
                    [ -z "$(grep -E "^Endpoint" ${CONFIG_DIR}${WG_INTERFACE}.conf)" ] && Mode="server" || Mode="client"

                    DESC=$(awk -v pattern="$WG_INTERFACE" 'match($0,"^"pattern) {print $0}' /jffs/configs/WireguardVPN_map | grep -oE "#.*$" | sed 's/^[ \t]*//;s/[ \t]*$//')
                    Say "$VERSION Requesting termination of WireGuard VPN '$Mode' Peer ('$WG_INTERFACE') $DESC."

                    if [ -z "$(ifconfig | grep -E "^$WG_INTERFACE")" ];then
                        echo -e $cRED"\a\t";Say "WireGuard VPN '$Mode' Peer ('$WG_INTERFACE') NOT ACTIVE";echo -e
                    else
                        if [ "$Mode" == "server" ]; then

                                ${CONFIG_DIR}wg_server $WG_INTERFACE "disable"

                                elif [ "$Mode" == "client" ] && [ "$Route" != "policy" ] ; then

                                    #wg show $WG_INTERFACE >/dev/null 2>&1 && ${CONFIG_DIR}wg-down $WG_INTERFACE || Say "WireGuard $Mode service ('$WG_INTERFACE') NOT running."
                                    /opt/bin/wg show $WG_INTERFACE >/dev/null 2>&1 && ${CONFIG_DIR}wg_manager.sh $WG_INTERFACE "disable" || Say "WireGuard $Mode service ('$WG_INTERFACE') NOT running."
                                else
                                    /opt/bin/wg show $WG_INTERFACE >/dev/null 2>&1 && ${CONFIG_DIR}wg_manager.sh $WG_INTERFACE "disable" "policy" || Say "WireGuard $Mode (Policy) service ('$WG_INTERFACE') NOT running."
                        fi

                    fi
                done

            /opt/bin/wg show all

            ;;
        restart)

            [ -n "$(ifconfig $WG_INTERFACE 2>/dev/null | grep inet)" ] && { Say "$VERSION Restarting WireGuard VPN '$Mode' Peer ('$WG_INTERFACE') $DESC"; ${CONFIG_DIR}wg_server $WG_INTERFACE "disable"; sleep 1; }

            if [ "$Mode" == "server" ] ; then

                ${CONFIG_DIR}wg_server $WG_INTERFACE "disable"
                ${CONFIG_DIR}wg_server $WG_INTERFACE

                elif [ "$Mode" == "client" ] && [ "$Route" != "policy" ] ; then
                    ${CONFIG_DIR}wg_manager.sh $WG_INTERFACE "disable"
                    ${CONFIG_DIR}wg_manager.sh $WG_INTERFACE
                else
                    Say "...in Policy mode"
                    ${CONFIG_DIR}wg_manager.sh $WG_INTERFACE "disable" "policy"
                    ${CONFIG_DIR}wg_manager.sh $WG_INTERFACE "policy"
            fi

            /opt/bin/wg show all
            ;;
    esac

    exit 0
fi

# Process ALL other CMD line requests
#####################################
case "$ACTION" in
    check|checkdebug)
        echo -e
        Say "$VERSION WireGuard VPN Peer Status check....."
        if [ -n "$(which wg)" ];then
            /opt/bin/wg show all > /tmp/WireGuard.txt
            echo -e
            if [ $(wc -l < /tmp/WireGuard.txt) -ne 0 ];then
                while IFS='' read -r LINE || [ -n "$LINE" ]; do

                    COLOR=$cBCYA

                    # interface: wg1? or wg2?
                    if [ -n "$(echo "$LINE" | grep -E "interface:")" ];then
                        TAB="\t"
                        COLOR=$cBMAG
                        WG_INTERFACE=$(echo $LINE | awk '{print $2}')

                        [ -z "$(grep -E "^Endpoint" ${CONFIG_DIR}${WG_INTERFACE}.conf)" ] && TYPE="server" || TYPE="client"

                        # Read the Remote peer config to set the LOCAL peer endpoint
                        if [ -f /jffs/configs/WireguardVPN_map ];then
                            LOCALIP=$(awk -v pattern="$WG_INTERFACE" 'match($0,"^"pattern) {print $2}' /jffs/configs/WireguardVPN_map)
                            SOCKET=$(awk -v pattern="$WG_INTERFACE" 'match($0,"^"pattern) {print $4}' /jffs/configs/WireguardVPN_map)
                            DESC=$(awk -v pattern="$WG_INTERFACE" 'match($0,"^"pattern) {print $0}' /jffs/configs/WireguardVPN_map | grep -oE "#.*$" | sed 's/^[ \t]*//;s/[ \t]*$//')
                        fi
                        LINE=${COLOR}$LINE" ${cBMAG}\t('$TYPE' $DESC)"
                    else
                        TAB="\t\t"
                        [ -n "$(echo "$LINE" | grep -E "transfer:")" ] && COLOR=$cBWHT
                    fi

                    # endpoint: 209.58.188.180:51820
                    if [ -n "$(echo "$LINE" | grep -iE "Endpoint" )" ];then
                        # Don't get the description based on interface, but the IP socket?
                        #SOCKET=$(echo $LINE | awk '{print $2}')
                        #DESC=$(awk -v pattern="$SOCKET" 'match($0,pattern) {print $0}' /jffs/configs/WireguardVPN_map | grep -oE "#.*$" | sed 's/^[ \t]*//;s/[ \t]*$//')
                        #LINE=${COLOR}$LINE" ${cBMAG}\t\t\t("$DESC")"
                        :
                    fi

                    if [ -n "$(echo "$LINE" | grep -iE "peer:" )" ] && [ "$TYPE" == "server" ];then
                        PUB_KEY=$(echo "$LINE" | awk '{print $2}')
                        DESC=$(grep -F "$PUB_KEY" /jffs/configs/WireguardVPN_map | grep -oE "#.*$" | sed 's/^[ \t]*//;s/[ \t]*$//')
                        [ -z "$DESC" ] && DESC="?"
                        LINE=${COLOR}$LINE" ${cBMAG}\t('$TYPE client'  $DESC)"
                    fi

                    echo -e ${TAB}${COLOR}$LINE


                done < /tmp/WireGuard.txt
            else
                SayT "No WireGuard Peers active"
                echo -e "\tNo WireGuard Peers active\n"
            fi
            if [ "$1" == "checkdebug" ];then
                #echo -e $cBWHT"\n\tDEBUG: Routing Table main\n";ip route | grep "wg.";for WG_INTERFACE in $(wg show interfaces);do I=${WG_INTERFACE:3:1};echo -e "\n\tDEBUG: Routing Table 12$I";ip route show table 12$I;done
                echo -e $cBWHT"\n\tDEBUG: Routing Table main\n"
                ip route | grep "wg."
                for WG_INTERFACE in $(wg show interfaces)
                    do I=${WG_INTERFACE:3:1}
                        [ "${WG_INTERFACE:0:3}" != "wg2" ] && echo -e "\n\tDEBUG: Routing Table 12$I"
                        ip route show table 12$I
                    done

                echo -e $cBWHT"\n\tDEBUG: RPDB rules"
                #ip rule | grep -E "lookup 12[1-5]"
                ip rule
                echo -e $cRESET
            fi
        else
            echo -en $cRED"\a\n\t";Say "Wireguard VPN module 'wg' NOT installed (use 'install')"$cRESET
            echo -e
        fi
        ;;
    install)

        if [ "$(Is_AX)" == "N" ] && [ "$(Is_HND)" == "N" ];then
            echo -e $cBRED"\a\n\tERROR: Router$cRESET $HARDWARE_MODEL (v$BUILDNO)$cBRED is not currently compatible with WireGuard!\n"
            exit 96
        fi

        # Temporary directory if '/opt/etc/wireguard' doesn't exist
        mkdir -p /tmp/wireguard
        if [ -d /opt/etc/ ];then
           [ ! -d /opt/etc/wireguard ] && mkdir -p /opt/etc/wireguard
        else
            echo -e $cBRED"\a\n\t***ERROR: Entware directory '${cRESET}/opt/etc/${cBRED}' not found? - Please install Entware (amtm Diversion)\n"$cRESET
            exit 95
        fi

        if [ -d /opt/etc/wireguard ];then
            echo -e $cBCYA"\n\tDownloading scripts 'wg_manager.sh/wg_server'\n"$cRESET
            curl -# -L --retry 3 "https://raw.githubusercontent.com/MartineauUK/wireguard/main/wg_manager.sh" -o "${CONFIG_DIR}wg_manager.sh" && chmod 755 "${CONFIG_DIR}wg_manager.sh"
            curl -# -L --retry 3 "https://raw.githubusercontent.com/MartineauUK/wireguard/main/wg_server"     -o "${CONFIG_DIR}wg_server"  && chmod 755 "${CONFIG_DIR}wg_server"
        fi

        # Kernel module
        echo -e $cBCYA"\n\tDownloading Wireguard Kernel module for $HARDWARE_MODEL (v$BUILDNO)"$cRESET

        ROUTER_COMPATIBLE="Y"

        Download_Modules $HARDWARE_MODEL
        Load_Module_UserspaceTool

        # Create the Sample/template parameter file '/jffs/configs/WireguardVPN_map'
        Create_Sample_Config

        # Create dummy 'Client' and 'Server' templates
        echo -e $cBCYA"\n\tCreating WireGuard 'Client' and 'Server' Peer templates 'wg11.conf' and wg21.conf'"$cRESET
        cat > ${CONFIG_DIR}wg11.conf << EOF
[Interface]
#Address = 10.10.10.2/24
#DNS = 10.10.10.1
PrivateKey = This_should_be_replaced_with_YOUR_Private_Key

[Peer]
Endpoint = edit.this.IP.address:51820
PublicKey = This_should_be_replaced_with_the_Remote_Peer_Public_Key
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
EOF

        # Create Server template
        cat > ${CONFIG_DIR}wg21.conf << EOF
[Interface]
PrivateKey = This_should_be_replaced_with_$HARDWARE_MODEL_Private_Key
ListenPort = 51820

# e.g. Accept a WireGuard connection from say YOUR mobile device to the router
# see '${CONFIG_DIR}mobilephone_private.key'
[Peer]
PublicKey = This_should_be_replaced_with_the_Public_Key_of_YOUR_mobile_device
AllowedIPs = 10.50.1.1/32
EOF

        # Create 'server' Peer wg21
        echo -e $cBCYA"\n\tCreating WireGuard Private/Public key-pairs for $HARDWARE_MODEL (v$BUILDNO)"$cRESET
        if [ -n "$(which wg)" ];then
            for I in 1 2 3 4 5
                do
                    wg genkey | tee ${CONFIG_DIR}client1${I}_private.key | wg pubkey | tee ${CONFIG_DIR}client1${I}_public.key
                done
            for I in 1 2
                do
                    wg genkey | tee ${CONFIG_DIR}server2${I}_private.key | wg pubkey | tee ${CONFIG_DIR}server2${I}_public.key
                done

            # Update the Sample Peer templates with the router's real keys
            PRIV_KEY=$(cat ${CONFIG_DIR}client11_private.key)
            PRIV_KEY=$(Convert_Key "$PRIV_KEY")
            sed -i "/^PrivateKey/ s~[^ ]*[^ ]~$PRIV_KEY~3" ${CONFIG_DIR}wg11.conf

            PRIV_KEY=$(cat ${CONFIG_DIR}server21_private.key)
            PRIV_KEY=$(Convert_Key "$PRIV_KEY")
            sed -i "/^PrivateKey/ s~[^ ]*[^ ]~$PRIV_KEY~3" ${CONFIG_DIR}wg21.conf

            # Create a Private/Public key-pair for your mobile phone
            wg genkey | tee ${CONFIG_DIR}mobilephone_private.key | wg pubkey | tee ${CONFIG_DIR}mobilephone_public.key
            PUB_KEY=$(cat ${CONFIG_DIR}mobilephone_public.key)
            PUB_KEY=$(Convert_Key "$PUB_KEY")
            sed -i "/^PublicKey/ s~[^ ]*[^ ]~$PUB_KEY~3" ${CONFIG_DIR}wg21.conf

        fi

        if  [ -n "$(which wg)" ] && [ "$ROUTER_COMPATIBLE" == "Y" ];then
            echo -e $cBWHT"\n\tWireGuard install COMPLETED.\n"$cRESET
            rm -rf /tmp/wireguard

            # Backup the legacy original if it exists
            if [ -f /jffs/scripts/S50wireguard ];then
                [ -f /opt/etc/init.d/S50wireguard ] && mv /opt/etc/init.d/S50wireguard /opt/etc/init.d/S50wireguard.$TS
                cp /jffs/scripts/S50wireguard /opt/etc/init.d/S50wireguard
                rm /jffs/scripts/S50wireguard
            fi

            # Test the this script against the two Sample Peers (wg11 and Wg21)
            echo -e $cBGRE"\n\tTest Initialising the Sample WireGuard 'client' and 'server' Peers, BUT ONLY the Sample 'server' will start up!! :-).\n"$cRESET
            /opt/etc/init.d/S50wireguard start
            # Test the checkdebug report
            echo -e $cBGRE"\n\tTest WireGuard Peer Status (in verbose DEBUG mode to show RPDB rules"
            /opt/etc/init.d/S50wireguard checkdebug
            echo -e $cBGRE"\n\tTerminating ACTIVE WireGuard Peers...\n"$cRESET
            /opt/etc/init.d/S50wireguard stop
        else
            echo -e $cBRED"\n\t***ERROR: WireGuard install FAILED!\n"$cRESET
            # rm -rF /tmp/wireguard
        fi

        # Create Alias
        if [ -z "$(grep "S50wireguard" /jffs/configs/profile.add)" ];then
            echo "alias wgstart='/opt/etc/init.d/S50wireguard start'"               >>/jffs/configs/profile.add
            echo "alias wgstop='/opt/etc/init.d/S50wireguard stop'"                 >>/jffs/configs/profile.add
            echo "alias wgr='/opt/etc/init.d/S50wireguard check'"                   >>/jffs/configs/profile.add
            echo "alias wgd='/opt/etc/init.d/S50wireguard checkdebug'"              >>/jffs/configs/profile.add
        fi
        ;;
    getmodules)

        Download_Modules $HARDWARE_MODEL
        ;;
    loadmodules)

        Load_Module_UserspaceTool
        ;;
    usedns)
        #cp ${CONFIG_DIR}S50wireguard /opt/etc/init.d

        # Allow dnmsasq to listen on Wireguard interfaces for DNS
        if [ -z "$(grep -E "^interface=wg\*" /jffs/configs/dnsmasq.conf.add)" ];then
            echo -e $cBGRE"Adding 'wg*' interfaces to DNSMasq"$cRESET
            echo -e "interface=wg*" >> /jffs/configs/dnsmasq.conf.add
            service restart_dnsmasq
        fi
        ;;
    createconfig)

        Create_Sample_Config

        ;;
    uninstall)

        echo -e $cBCYA"\n\tUninstalling Wireguard Kernel module and Userspace Tools for $HARDWARE_MODEL (v$BUILDNO)"$cBRED
        opkg remove wireguard-kernel wireguard-tools
        echo -e $cBCYA"\n\tDeleting Wireguard install directories and files"$cRESET
        [ -f /opt/etc/init.d/S50wireguard ] && rm /opt/etc/init.d/S50wireguard
        [ -f /jffs/scripts/S50wireguard ] && rm /jffs/scripts/S50wireguard
        [ -f /jffs/configs/WireguardVPN_map ] && rm /jffs/configs/WireguardVPN_map
        sed -i '/S50wireguard/d' /tmp/home/root/.profile
        rm -rf /tmp/wireguard

        echo -e "\tPress$cBRED Y$cRESET to$cBRED delete ALL WireGuard DATA files (Peer *.config etc.) $cRESET('/opt/etc/wireguard') or press$cBGRE [Enter] to keep custom WireGuard DATA files."
        read -r "ANS"
        if [ "$ANS" == "Y" ];then
           echo -e $cBCYA"\n\tDeleting $cRESET'/opt/etc/wireguard'\n"
           [ -d /opt/etc/wireguard ] && rm -rf /opt/etc/wireguard
        fi

        echo -e $cBGRE"\n\tWireGuard Uninstall complete for $HARDWARE_MODEL (v$BUILDNO)\n"$cRESET
        ;;
    genkeys)                                                            # {name} [{tag="desciption{"}}]     # v1.03
        # Create a Private/Public key-pair for your mobile phone etc.
        #           e.g. genkeys   Nokia6310 tag="Best phone ever!"
        #
        DEVICE_NAME=$2
        if [ -n "$DEVICE_NAME" ];then
            echo -e $cBCYA"\n\tCreating Wireguard Private/Public key pair for device '$DEVICE_NAME'"$cBYEL
            wg genkey | tee ${CONFIG_DIR}${2}_private.key | wg pubkey | tee ${CONFIG_DIR}${2}_public.key
            echo -e $cBYEL"\n\tDevice '"$DEVICE_NAME"' Public key="$(cat ${CONFIG_DIR}${2}_public.key)"\n"$cRESET
            echo -e "\tPress$cBRED y$cRESET to$cBRED ADD device '$DEVICE_NAME' ${cRESET}to 'server' Peer (wg21) or press$cBGRE [Enter] to SKIP."
            read -r "ANS"
            if [ "$ANS" == "y" ];then
                echo -e $cBCYA"\n\tAdding device Peer '$DEVICE_NAME' to $HARDWARE_MODEL 'server' (wg21) and WireGuard config\n"
                if [ -z "$(grep "$DEVICE_NAME" ${CONFIG_DIR}wg21.conf)" ];then

                    PUB_KEY=$(cat ${CONFIG_DIR}${DEVICE_NAME}_public.key)
                    PUB_KEY=$(Convert_Key "$PUB_KEY")

                    DHCP_POOL=$(awk '/^wg21/ {print $3}' /jffs/configs/WireguardVPN_map | tr '/' ' ' | awk '{print $1}')
                    DHCP_POOL_SUBNET=${DHCP_POOL%.*}
                    IP=$(grep -F "$DHCP_POOL_SUBNET." /jffs/configs/WireguardVPN_map | grep -Ev "^#" | grep -v "wg21" | awk '{print $2}' | sed 's~/32.*$~~g' | sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 | tail -n 1)
                    IP=${IP##*.}        # 4th octet
                    IP=$((IP+1))
                    [ $IP -le 254 ] && IP=$DHCP_POOL_SUBNET"."$IP"/32"
                    echo -e >> ${CONFIG_DIR}wg21.conf
                    cat >> ${CONFIG_DIR}wg21.conf << EOF
#$DEVICE_NAME
[Peer]
PublicKey = $PUB_KEY
AllowedIPs = $IP
EOF
                    tail -n 4 ${CONFIG_DIR}wg21.conf

                    # Add identifier to config
                    IP=$(echo "$IP" | sed 's~/32.*$~~')
                    TAG=$(echo "$@" | sed -n "s/^.*tag=//p" | awk '{print $0}')
                    [ -z "$TAG" ] && TAG="Device"                                   # v1.03
                    [ -z "$(grep "$PUB_KEY" /jffs/configs/WireguardVPN_map)" ] && echo -e "$PUB_KEY      $IP     # $DEVICE_NAME $TAG" >> /jffs/configs/WireguardVPN_map     # v.03
                    tail -n 1 /jffs/configs/WireguardVPN_map
                    else
                        echo -e $cBRED"\a\n\t***ERROR 'client' Peer device$cRESET '$DEVICE_NAME'$cBRED already defined in ${cRESET}'server' (wg21)\n"$cRESET
                    fi
                fi
            else
                echo -e $cBRED"\a\n\t***ERROR Missing name of client Peer device\n"$cRESET
            fi
        ;;
    "?"|u|u" "*|uf|uf" "*)

        case "$ACTION" in
            "?")
                echo -e $cBWHT"\n$VERSION $(basename $0) WireGuard Session Manager"$cRESET  # v1.04
                echo -e $cBWHT"\n\tChecking GitHub for software updates...."$cRESET
                Check_Version_Update
                echo -e $cRESET

                Check_Module_Versions
                ;;
            *)
                [ "$2" == "dev" ] && DEV="dev" || DEV="main"
                DOWNLOAD="N"
                if [ "$ACTION" == "uf" ];then
                    echo -e ${cRESET}$cWRED"\n\tForced Update"$cRESET"\n"
                    DOWNLOAD="Y"
                else
                    Check_Version_Update
                    [ $? -eq 1 ] && DOWNLOAD="Y"        # '2' means 'Push to GitHub' pending! ;-;
                fi

                if [ "$DOWNLOAD" == "Y" ];then
                    download_file /opt/etc/init.d S50wireguard martineau $DEV dos2unix
                    download_file "${CONFIG_DIR}" wg_manager.sh martineau $DEV dos2unix
                    download_file "${CONFIG_DIR}" wg_server martineau $DEV dos2unix
                    echo -e
                fi

                Check_Module_Versions

                echo -e $cRESET
                ;;
        esac
        ;;
    "-h"|help)

            ShowHelp
        ;;
    *)
        ShowHelp
        ;;
esac
#) 2>&1 | logger -t $(basename $0)"[$$_***DEBUG]"
