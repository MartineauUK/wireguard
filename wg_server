#!/bin/sh
VERSION="v4.15.6"
#============================================================================================ Â© 2021-2022 Martineau v4.15.6
#

# Maintainer: Martineau
# Last Updated Date: 12-Feb-2022
#
# Description:
#
# Acknowledgement:
#
# Contributors: odkrys,ZebMcKayhan,Torson,chongnt,Bearnet

# shellcheck disable=SC2034
ANSIColours () {

    local ACTION=$1

    cRESET=
    aBOLD=;aDIM=;aUNDER=;aBLINK=;aREVERSE=
    aBOLDr=;aDIMr=;aUNDERr=;aBLINKr=;aREVERSEr=

    cBLA=;cRED=;cGRE=;cYEL=;cBLU=;cMAG=;cCYA=;cGRA=;cFGRESET=
    cBGRA=;cBRED=;cBGRE=;cBYEL=;cBBLU=;cBMAG=;cBCYA=;cBWHT=
    cWRED=;cWGRE=;cWYEL=;cWBLU=;cWMAG=;cWCYA=;cWGRA=
    cYBLU=
    cRED_=;cGRE_=

    if [ "$ACTION" != "disable" ];then
        cRESET="\e[0m";
        aBOLD="\e[1m";aDIM="\e[2m";aUNDER="\e[4m";aBLINK="\e[5m";aREVERSE="\e[7m"
        aBOLDr="\e[21m";aDIMr="\e[22m";aUNDERr="\e[24m";aBLINKr="\e[25m";aREVERSEr="\e[27m"
        cBLA="\e[30m";cRED="\e[31m";cGRE="\e[32m";cYEL="\e[33m";cBLU="\e[34m";cMAG="\e[35m";cCYA="\e[36m";cGRA="\e[37m";cFGRESET="\e[39m"
        cBGRA="\e[90m";cBRED="\e[91m";cBGRE="\e[92m";cBYEL="\e[93m";cBBLU="\e[94m";cBMAG="\e[95m";cBCYA="\e[96m";cBWHT="\e[97m"
        aBOLD="\e[1m";aDIM="\e[2m";aUNDER="\e[4m";aBLINK="\e[5m";aREVERSE="\e[7m"

        cWRED="\e[41m";cWGRE="\e[42m";cWYEL="\e[43m";cWBLU="\e[44m";cWMAG="\e[45m";cWCYA="\e[46m";cWGRA="\e[47m"
        cYBLU="\e[93;48;5;21m"
        cRED_="\e[41m";cGRE_="\e[42m"
    fi

    xHOME="\e[H";xERASE="\e[2J";xERASEDOWN="\e[J";xERASEUP="\e[1J";xCSRPOS="\e[s";xPOSCSR="\e[u";xERASEEOL="\e[K";xQUERYCSRPOS="\e[6n"
    xGoto="\e[Line;Columnf"
}
Is_IPv4() {
        grep -oE '^([0-9]{1,3}\.){3}[0-9]{1,3}$'                    # IPv4 format
}
Is_IPv4_CIDR () {
        grep -oE '^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$'         # IPv4 CIDR range notation
}
Is_Private_IPv6 () {
    grep -oE "(::1$)|([fF][cCdD])"
}
Get_WAN_IF_Name () {

    # echo $([ -n "$(nvram get wan0_pppoe_ifname)" ] && echo $(nvram get wan0_pppoe_ifname) || echo $(nvram get wan0_ifname))
    #   nvram get wan0_gw_ifname
    #   nvram get wan0_proto

    local IF_NAME=$(ip route | awk '/^default/{print $NF}')     # Should ALWAYS be 100% reliable ?

    local IF_NAME=$(nvram get wan0_ifname)                      # ...but use the NVRAM e.g. DHCP/Static ?

    # Usually this is probably valid for both eth0/ppp0e ?
    if [ "$(nvram get wan0_gw_ifname)" != "$IF_NAME" ];then
        local IF_NAME=$(nvram get wan0_gw_ifname)
    fi

    if [ ! -z "$(nvram get wan0_pppoe_ifname)" ];then
        local IF_NAME="$(nvram get wan0_pppoe_ifname)"          # PPPoE
    fi

    echo $IF_NAME
}
Firewall_delete() {

    iptables -t mangle -D PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t mangle -D FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t mangle -D FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t mangle -D FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'" 2>/dev/null

    iptables -D INPUT -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -D INPUT -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -D FORWARD -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -D FORWARD -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -D FORWARD -i br0 -o $VPN_ID -j ACCEPT -m comment --comment "LAN to WireGuard 'server clients'" 2>/dev/null
    iptables -D OUTPUT -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t nat -D PREROUTING -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t nat -D POSTROUTING -s $Subnet -o wg1+ -j MASQUERADE -m comment --comment "WireGuard 'server'"  2>/dev/null  # v1.11
    iptables -t nat -D POSTROUTING -s $Subnet -o br0 -j MASQUERADE -m comment --comment "WireGuard 'server clients to LAN'" 2>/dev/null # v4.14.2

    if [ "$(nvram get ipv6_service)" != "disabled" ];then
        ip6tables -t mangle -D PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -t mangle -D FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -t mangle -D FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -t mangle -D FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'" 2>/dev/null

        ip6tables -D INPUT -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -D INPUT -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -D FORWARD -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -D FORWARD -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -D FORWARD -i br0 -o $VPN_ID -j ACCEPT -m comment --comment "LAN to WireGuard 'server clients'" 2>/dev/null
        ip6tables -D OUTPUT -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -t nat -D PREROUTING -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null   # v4.14.1
        ip6tables -t nat -D POSTROUTING -s $Subnet -o wg1+ -j MASQUERADE -m comment --comment "WireGuard 'server'"  2>/dev/null # v4.14.1
        ip6tables -t nat -D POSTROUTING -s $Subnet -o br0 -j MASQUERADE -m comment --comment "WireGuard 'server'"  2>/dev/null  # v4.14.1
    fi
}
Manage_Passthru() {

    local PASSTHRU_CLIENTS=$(sqlite3 /opt/etc/wireguard.d/WireGuard.db "SELECT client FROM passthru where server='$WG_INTERFACE';" | sort | uniq | tr '\n' ' ')
    local VPN_ID=           # v4.13 Fix @chongnt

    local ACTION="add"
    [ -n "$1" ] && ACTION=$1        # "del" or "add"

    if [ -n "$PASSTHRU_CLIENTS" ];then

    local IP_ADDR=$(sqlite3 $SQL_DATABASE "SELECT subnet FROM servers where peer='$WG_INTERFACE';")

        for VPN_ID in $PASSTHRU_CLIENTS     # wg11 wg14
            do
                local VPN_NUM=${VPN_ID#"${VPN_ID%?}"}
                local TABLE=12$VPN_NUM
                [ "$VPN_ID" == "wan" ] && TABLE="main"

                if [ "$ACTION" == "add" ];then
                    if [ "$VPN_ID" != "wan" ];then
                        # Ensure target WireGuard 'client' peer routing policy table contains WireGuard 'server' peer IP/network in the passthru tunnel @chongnt
                        while read ROUTE; do
                            ip route $ACTION $ROUTE table $TABLE 2>/dev/null && ROUTING_CHANGED=
                        done << EOR
$(ip route | grep "$WG_INTERFACE")
EOR
                    fi

                    ip rule $ACTION from $IP_ADDR table $TABLE prio 998$VPN_NUM                 # v4.14 v4.13 Fix @chongnt

                else
                    ip rule $ACTION from $IP_ADDR table $TABLE prio 998$VPN_NUM 2>/dev/null     # v4.14
                fi
            done
    fi
}
Process_Pre_Post_Commands() {
    # v4.14.1
    while read LINE; do
            CMDTYPE=$1
            CMD="$(echo "$LINE" | sed "s/\%i/$WG_INTERFACE/g;s/\%w/$WAN_IF/g;s/\%p/$LISTEN_PORT/g")"    # v4.14.4 v4.14.1
            if [ -n "$CMD" ];then
                logger -t "wireguard-${MODE}${VPN_NAME}" "Executing $CMDTYPE: '$CMD'"
                if [ -n "$(echo "$CMDTYPE" | grep "Up")" ];then             # v4.4.4
                    cmd $CMD
                else
                    $CMD 2>/dev/null                                        # v4.4.4
                fi

            fi
    done << EOR
$(grep -E "^#${1}" ${CONFIG_DIR}${WG_INTERFACE}.conf | tr ';' '\n' | sed 's/^#.*=//')
EOR

}
Firewall_Rule_Exists() {

    local CMD="$@"
    local RULE_EXISTS="N"

    local CHECK_DUPLICATE=$(echo "$CMD" | sed 's/-[IA]/-C/')
    if [ -z "$(echo "$CMD" | grep -Fo "comment" )" ];then
        $CHECK_DUPLICATE -m comment --comment "WireGuard 'server'" 2>/dev/null
        RC=$?
        [ $RC -eq 0 ] && local RULE_EXISTS="Y"
    fi
    if [ "$RULE_EXISTS" == "N" ];then
        $CHECK_DUPLICATE 2>/dev/null
        RC=$?
        [ $RC -eq 0 ] && local RULE_EXISTS="Y"
    fi

    echo "$RULE_EXISTS"
}
cmd() {

    local CMD=$(echo "$@" | awk '{print $1}')

    [ "$SHOWCMDS" == "Y" ] && echo "[#] $*" >&2     # v4.15.1

    case $CMD in
        *tables*)
            if [ "$(Firewall_Rule_Exists "$@")" == "Y" ];then
                logger -t "wireguard-${MODE}${VPN_NAME}" "..........duplicate; skipped!"
                return
            fi
        ;;
    esac

    "$@"
}
#For verbose debugging, uncomment the following two lines, and uncomment the last line of this script
#set -x
#(

Main() { true; }            # Syntax that is Atom Shellchecker compatible!

if [ -f ${INSTALL_DIR}WireguardVPN.conf ] && [ -z "$(grep -E "^NOCOLOR|^NOCOLOUR" ${INSTALL_DIR}WireguardVPN.conf)" ];then     # v4.15.4
    ANSIColours
fi

SQL_DATABASE="/opt/etc/wireguard.d/WireGuard.db"        # v1.13
CONFIG_DIR="/opt/etc/wireguard.d/"                 # Conform to "standards"         # v1.08 @elorimer
INSTALL_DIR="/jffs/addons/wireguard/"

VPN_ID=$1
[ -z "$1" ] && VPN_ID="wg21"

VPN_NAME=$VPN_ID

modprobe xt_set
modprobe xt_comment                                                                 # v1.13 Hotfix
if [ -f /opt/lib/modules/wireguard.ko ];then
    insmod /opt/lib/modules/wireguard 2> /dev/null
    logger -t "wireguard-server${VPN_ID:3:1}" "Initialising Wireguard 3rd-Party/Entware Kernel module '/opt/lib/modules/wireguard.ko'"
else
    KERNEL_MODULE=$(find /lib/modules -name "wireguard.ko")                      # v4.05
    if [ -n "$KERNEL_MODULE" ];then
        insmod $KERNEL_MODULE 2> /dev/null  # v4.05
        logger -t "wireguard-server${VPN_ID:3:1}" "Initialising Wireguard Kernel module '$KERNEL_MODULE'"
    else
        logger -t "wireguard-server${VPN_ID:3:1}" "***ERROR Failure to Initialise Wireguard Kernel module - ABORTing"
        exit 99
    fi
fi



[ -n "$(echo "$@" | grep "debug")" ] && SHOWCMDS="Y"                        # v4.14.4

[ -n "$(echo "$@" | grep "wg-quick")" ] && EXECUTE="wg-quick"               # v4.14.5

WG_INTERFACE=$VPN_ID
VPN_NUM=${VPN_ID#"${VPN_ID%?}"}                     # v4.02

WAN_IF=$(Get_WAN_IF_Name)

wgport=$(awk '/^Listen/ {print $3}' ${CONFIG_DIR}${VPN_ID}.conf)        # v4.14.4
Subnet=$(sqlite3 $SQL_DATABASE "SELECT subnet FROM servers where peer='$WG_INTERFACE';") # v1.09 @here1310

SOCKET=$(nvram get wan0_gateway)":"$wgport          # v4.04

DESC=$(sqlite3 $SQL_DATABASE "SELECT tag FROM servers where peer='$WG_INTERFACE';")
DESC=$(printf "%s" "$DESC" | sed 's/^[ \t]*//;s/[ \t]*$//')

[ -z "$DESC" ] && DESC="# Unidentified"

IPV6_SERVICE=$(nvram get ipv6_service)          # v4.14.1
if [ "$IPV6_SERVICE" != "disabled" ];then       # v4.1
    case $IPV6_SERVICE in
        native|ipv6pt|dhcp6)
            # ip -6 addr | grep "scope global"
            USE_IPV6="Y"; IPV6_TXT="(IPv6) "    # 4.08
            LAN_SUBNET_IPV6=$(nvram get ipv6_prefix)        # v4.14.6
            LAN_ADDR_IPV6=$(nvram get ipv6_rtr_addr)        # v4.14.6
        ;;
        6to4|6in4|6rd)
            :
        ;;
        other)
            :
        ;;
        spoof|simulate)
            USE_IPV6="Y"; IPV6_TXT="(IPv6) Simulate "   # v4.14
        ;;
    esac
fi

# Override IPv6 ?
if [ -f /jffs/addons/wireguard/WireguardVPN.conf ] && [ -n "$(grep -E "^NOIPV6" /jffs/addons/wireguard/WireguardVPN.conf)" ];then    # v4.12
    USE_IPV6="N"; IPV6_TXT=
    logger -t "wireguard-${MODE}${VPN_NAME}" "'NOIPV6' directive found ('WireguardVPN.conf')- IPv6 configuration forced to IPv4"    # v4.12
fi

WAN_IPV4=$(ip -4 addr | sed -ne 's|^.* inet  \([^/]*\)/.* scope global.*$|\1|p' | awk '{print $1}' | head -1)           # v4.14.1
[ "$USE_IPV6" == "Y" ] && { WAN_IPV6=$(ip -6 addr | sed -ne 's|^.* inet6 \([^/]*\)/.* scope global.*$|\1|p' | head -1); IPV6_TXT=$IPV6_TXT"["$WAN_IPV6"] ";  }  # v4.14.1

if [ "$USE_IPV6" != "Y" ];then
    # CIDR ?
    if [ -z "$(echo "$Subnet" | Is_IPv4_CIDR)" ];then
        SUBNET_PREFIX=${Subnet%.*}
        Subnet=$SUBNET_PREFIX".0/24"
    fi
fi

LISTEN_PORT=$(awk '/^ListenPort/ {print $3}' ${CONFIG_DIR}${WG_INTERFACE}.conf)

if [ "$2" != "disable" ];then

    logger -t "wireguard-server${VPN_ID:3:1}" "Initialising Wireguard VPN ${IPV6_TXT}'Server' Peer ($VPN_ID) on $SOCKET"
    echo -e $cBCYA"\twireguard-server${VPN_ID:3:1}: Initialising Wireguard VPN ${IPV6_TXT}'Server' Peer (${cBMAG}$VPN_ID$cBCYA) on $SOCKET (${cBMAG}${DESC}${cBCYA})"$cRESET

    ip link del dev $VPN_ID 2>/dev/null
    cmd ip link add dev $VPN_ID type wireguard
    if [ "$USE_IPV6" == "Y" ];then              # v4.05
        ip -6 link del dev $VPN_ID 2>/dev/null
        cmd ip -6 link add dev $VPN_ID type wireguard
    fi

    cmd wg set $VPN_ID fwmark $wgport

    [ "$SHOWCMDS" == "Y" ] && echo -e "[#] wg setconf $VPN_ID ${CONFIG_DIR}$VPN_ID.conf"    # v4.14.5
    echo -en ${cRED}                                                                        # v4.14.5
    wg setconf $VPN_ID ${CONFIG_DIR}$VPN_ID.conf
    if [ $? -ne 0 ];then                                                                    # v4.14.5
        # Syntax ERROR?
        # e.g. Endpoint DDNS not valid/resolved?
        echo -e $cRESET
        cmd ip link del dev $VPN_ID                                                         # v4.14.5
        [ "$USE_IPV6" == "Y" ] && cmd ip -6 link del dev $VPN_ID
        logger -t "wireguard-server${VPN_ID:3:1}" "***ERROR Initialisation ABORTED"         # v4.14.5
        echo -e ${cRESET}$cBRED"\a\t***ERROR Initialisation ABORTED - 'wg setconf $VPN_ID ${CONFIG_DIR}$VPN_ID.conf' FAILED\n"$cRESET

        echo -en $cRESET
        exit 1                                                                              # v4.14.5
    fi

    echo -e $cRESET

    # v4.14 Process 'PreUp' commands
    Process_Pre_Post_Commands "PreUp"   # v4.14.1

    cmd ip address add dev $VPN_ID $Subnet
    cmd ip link set up dev $VPN_ID
    if [ "$USE_IPV6" == "Y" ] && [ -n "$(echo "$Subnet" | grep ":")" ];then         # v4.05
        cmd ip -6 address add dev $VPN_ID $Subnet
        cmd ip -6 link set up dev $VPN_ID
    fi

    MTU=$(awk '/^#?MTU' ${CONFIG_DIR}${VPN_ID}.conf)            # v4.15.6
    if [ -z "$MTU" ];then
        cmd ifconfig $VPN_ID mtu 1420                           # v4.15.5
    else
        cmd ifconfig $VPN_ID mtu $MTU                           # v4.15.5 v1.02
        sed -i 's/^MTU/#MTU/' ${CONFIG_DIR}${VPN_ID}.conf
    fi

    TIMESTAMP=$(date +%s)
    sqlite3 $SQL_DATABASE "INSERT into session values('$WG_INTERFACE','Start','$TIMESTAMP');"   # v1.13
    # Site-to-Site identify remote site peer
    # Extract '# Cabin LAN'
    if [ "$(sqlite3 $SQL_DATABASE "SELECT auto FROM servers WHERE peer='$WG_INTERFACE';")" == "S" ];then    # v4.15.1
        SITE2SITE_PEER=$(awk '/^#.*LAN/ {print $2}' ${CONFIG_DIR}${WG_INTERFACE}.conf )                     # v4.15.1
        sqlite3 $SQL_DATABASE "INSERT into traffic values('$SITE2SITE_PEER','$TIMESTAMP','0','0','0','0');" # v4.15.1
    fi

    cmd ifconfig $VPN_ID txqueuelen 1000

    Firewall_delete

    if [ "$EXECUTE" != "wg-quick" ];then

        cmd ip route add default dev $VPN_ID table 2${VPN_NUM}"0"       # v4.03
        cmd ip rule add fwmark $(printf "%#07x\n" "2${VPN_NUM}0") table 2${VPN_NUM}"0" prio 98${VPN_NUM}0   # v4.03
        if [ "$USE_IPV6" == "Y" ];then                              # v4.05
            cmd ip -6 route add default dev $VPN_ID table 2${VPN_NUM}"0"    # v4.03
            cmd ip -6 rule add fwmark $(printf "%#07x\n" "2${VPN_NUM}0") table 2${VPN_NUM}"0" prio 98${VPN_NUM}0   # v4.03
        fi

        Manage_Passthru "add"

        if [ -f /jffs/addons/wireguard/WireguardVPN.conf ] && [ -z "$(grep -E "^NOTCPMSS" /jffs/addons/wireguard/WireguardVPN.conf)" ];then    # v4.12
            cmd iptables -t mangle -I FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'"
            cmd iptables -t mangle -I FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'"
        else
            logger -t "wireguard-${MODE}${VPN_NAME}" "'NOTCPMSS' directive found ('WireguardVPN.conf') -t mangle FORWARD chain TCP '-j TCPMSS --clamp-mss-to-pmtu' NOT configured"    # v4.12
        fi
        if [ -f /jffs/addons/wireguard/WireguardVPN.conf ] && [ -z "$(grep -E "^NOSETXMARK" /jffs/addons/wireguard/WireguardVPN.conf)" ];then    # v4.12
            cmd iptables -t mangle -I FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'"
            cmd iptables -t mangle -I PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'"
        else
            logger -t "wireguard-${MODE}${VPN_NAME}" "'NOSETXMARK' directive found ('WireguardVPN.conf') -t mangle FORWARD/PREROUTING chain'-j MARK --set-xmark 0x01/0x7' NOT configured"    # v4.12
        fi

        cmd iptables -I INPUT -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'"
        cmd iptables -I INPUT -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        cmd iptables -I FORWARD -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        cmd iptables -I FORWARD -i br0 -o $VPN_ID -j ACCEPT -m comment --comment "LAN to WireGuard 'server clients'"    # v4.14.1 @ZebMcKayhan
        cmd iptables -I OUTPUT -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        cmd iptables -t nat -I PREROUTING -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'"
        cmd iptables -t nat -I POSTROUTING -s $Subnet -o br0 -j MASQUERADE -m comment --comment "WireGuard 'server clients to LAN'" # v4.14.2

        if [ "$USE_IPV6" == "Y" ];then                          # v4.05
            if [ -f /jffs/addons/wireguard/WireguardVPN.conf ] && [ -z "$(grep -E "^NOTCPMSS" /jffs/addons/wireguard/WireguardVPN.conf)" ];then    # v4.12
                cmd ip6tables -t mangle -I FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'"
                cmd ip6tables -t mangle -I FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'"
            else
                logger -t "wireguard-${MODE}${VPN_NAME}" "'NOTCPMSS' directive found ('WireguardVPN.conf') IPv6 -t mangle FORWARD chain TCP '-j TCPMSS --clamp-mss-to-pmtu' NOT configured"    # v4.12
            fi
            if [ -f /jffs/addons/wireguard/WireguardVPN.conf ] && [ -z "$(grep -E "^NOSETXMARK" /jffs/addons/wireguard/WireguardVPN.conf)" ];then    # v4.12
                cmd ip6tables -t mangle -I FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'"
                cmd ip6tables -t mangle -I PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'"
            else
                logger -t "wireguard-${MODE}${VPN_NAME}" "'NOSETXMARK' directive found ('WireguardVPN.conf') IPv6 -t mangle FORWARD/PREROUTING chain'-j MARK --set-xmark 0x01/0x7' NOT configured"    # v4.12
            fi

            cmd ip6tables -I INPUT -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'"
            cmd ip6tables -I INPUT -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
            cmd ip6tables -I FORWARD -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
            cmd ip6tables -I FORWARD -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
            cmd ip6tables -I FORWARD -i br0 -o $VPN_ID -j ACCEPT -m comment --comment "LAN to WireGuard 'server clients'"   # v4.14.1 @ZebMcKayhan
            cmd ip6tables -I OUTPUT -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        fi

    fi

    for ALLOWIP in $(awk '/^AllowedIPs/ {$1="";$2="";print $0}' ${CONFIG_DIR}${VPN_ID}.conf | tr ',' ' ')   # v4.14.1
        do

            if [ "$USE_IPV6" == "Y" ] && [ -n "$(echo "$ALLOWIP" | grep -F ":")" ];then
                cmd ip -6 route add $ALLOWIP dev $VPN_ID
            else
                if [ -n "$(echo "$ALLOWIP" | Is_IPv4_CIDR)" ] || [ -n "$(echo "$ALLOWIP" | Is_IPv4)" ];then
                    #[ "$(echo "$ALLOWIP" | grep -o "^.*\.")" != "$(echo "$Subnet" | grep -o "^.*\.")" ] && cmd ip route add $ALLOWIP dev $VPN_ID        # v4.15.3
                    cmd ip route add $ALLOWIP dev $VPN_ID        # v4.15.5 v4.15.3
                fi
            fi
        done

    # User Exit @ZebMcKayhan
    [ -f ${INSTALL_DIR}Scripts/${VPN_ID}-up.sh ] && { logger -t "wireguard-server${VPN_ID:3:1}" "Executing ${VPN_ID}-up.sh"; sh ${INSTALL_DIR}Scripts/${VPN_ID}-up.sh; }

    # v4.14 Process 'PostUp' commands
    Process_Pre_Post_Commands "PostUp"  # v4.14.1

    echo -en $cBGRE"\t"
    logger -st "wireguard-server${VPN_ID:3:1}" "Initialisation complete."
    echo -e $cRESET

else

    # v4.14 Process 'PreDown' commands
    Process_Pre_Post_Commands "PreDown" # v4.14.1

    for ALLOWIP in $(awk '/^AllowedIPs/ {$1="";$2="";print $0}' ${CONFIG_DIR}${VPN_ID}.conf | tr ',' ' ')   # v4.14.1
        do
            if [ "$USE_IPV6" == "Y" ] && [ -n "$(echo "$ALLOWIP" | grep -F ":")" ];then
                ip -6 route del $ALLOWIP dev $VPN_ID 2>/dev/null
            else
                if [ -n "$(echo "$ALLOWIP" | Is_IPv4_CIDR)" ] || [ -n "$(echo "$ALLOWIP" | Is_IPv4)" ];then
                    ip route del $ALLOWIP dev $VPN_ID 2>/dev/null
                fi
            fi
        done

    ip link del dev $VPN_ID 2>/dev/null

    TIMESTAMP=$(date +%s)
    sqlite3 $SQL_DATABASE "INSERT into session values('$WG_INTERFACE','End','$TIMESTAMP');" # v1.13
    # Site-to-Site identify remote site peer
    # Extract '# Cabin LAN'
    if [ "$(sqlite3 $SQL_DATABASE "SELECT auto FROM servers WHERE peer='$WG_INTERFACE';")" == "S" ];then    # v4.15.1
        SITE2SITE_PEER=$(awk '/^#.*LAN/ {print $2}' ${CONFIG_DIR}${WG_INTERFACE}.conf )                     # v4.15.1
        sqlite3 $SQL_DATABASE "INSERT into traffic values('$SITE2SITE_PEER','$TIMESTAMP','*','*','*','*');" # v4.15.1
    fi

    Firewall_delete

    Manage_Passthru "del"

    ip route flush table 2${VPN_NUM}"0" 2>/dev/null     # v4.03
    ip rule del prio 98${VPN_NUM}0      2>/dev/null     # v4.03
    ip route flush cache 2>/dev/null                    # v4.03

    ip -6 route flush table 2${VPN_NUM}"0" 2>/dev/null     # v4.03
    ip -6 rule del prio 98${VPN_NUM}0      2>/dev/null     # v4.03
    ip -6 route flush cache 2>/dev/null                    # v4.03

    # User Exit @ZebMcKayhan
    [ -f ${INSTALL_DIR}Scripts/${VPN_ID}-down.sh ] && { logger -t "wireguard-server${VPN_ID:3:1}" "Executing ${VPN_ID}-down.sh"; sh ${INSTALL_DIR}Scripts/${VPN_ID}-down.sh; }

    # v4.14 Process 'PostDown' commands
    Process_Pre_Post_Commands "PostDown"    # v4.14.1

    logger -t "wireguard-server${VPN_ID:3:1}" "Wireguard VPN 'server' Peer ($VPN_ID) on" $SOCKET "Terminated"

    echo -en $cBGRE"\twireguard-server${VPN_ID:3:1}: Wireguard VPN ${IPV6_TXT}'Server' Peer (${cBMAG}$VPN_ID$cBGRE) on $SOCKET (${cBMAG}${DESC}${cBGRE}) ${cBRED}Terminated\n"$cRESET

    echo -e $cRESET
fi



#) 2>&1 | logger -t $(basename $0)"[$$_***DEBUG]"

