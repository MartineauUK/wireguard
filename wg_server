#!/bin/sh
VERSION="v4.05b3"
#============================================================================================ Â© 2021 Martineau v4.05b3
#

# Maintainer: Martineau
# Last Updated Date: 31-Oct-2021
#
# Description:
#
# Acknowledgement:
#
# Contributors: odkrys,ZebMcKayhan,Torson

# shellcheck disable=SC2034
ANSIColours() {
    cRESET="\e[0m";cBLA="\e[30m";cRED="\e[31m";cGRE="\e[32m";cYEL="\e[33m";cBLU="\e[34m";cMAG="\e[35m";cCYA="\e[36m";cGRA="\e[37m"
    cBGRA="\e[90m";cBRED="\e[91m";cBGRE="\e[92m";cBYEL="\e[93m";cBBLU="\e[94m";cBMAG="\e[95m";cBCYA="\e[96m";cBWHT="\e[97m"
    aBOLD="\e[1m";aDIM="\e[2m";aUNDER="\e[4m";aBLINK="\e[5m";aREVERSE="\e[7m"
    cWRED="\e[41m";cWGRE="\e[42m";cWYEL="\e[43m";cWBLU="\e[44m";cWMAG="\e[45m";cWCYA="\e[46m";cWGRA="\e[47m"
}
Is_IPv4_CIDR () {
        grep -oE '^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$'         # IPv4 CIDR range notation
}
Is_Private_IPv6 () {
    grep -oE "(::1$)|([fF][cCdD])"
}
Firewall_delete() {

    iptables -t mangle -D PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t mangle -D FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t mangle -D FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t mangle -D FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'" 2>/dev/null

    iptables -D INPUT -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -D INPUT -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -D FORWARD -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -D FORWARD -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -D OUTPUT -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t nat -D PREROUTING -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    iptables -t nat -D POSTROUTING -s $Subnet -o wg1+ -j MASQUERADE -m comment --comment "WireGuard 'server'"  2>/dev/null  # v1.11

    if [ "$(nvram get ipv6_service)" != "disabled" ];then
        ip6tables -t mangle -D PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -t mangle -D FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -t mangle -D FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -t mangle -D FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'" 2>/dev/null

        ip6tables -D INPUT -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -D INPUT -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -D FORWARD -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -D FORWARD -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
        ip6tables -D OUTPUT -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'" 2>/dev/null
    fi
}
Manage_Passthru(){

    local PASSTHRU_CLIENTS=$(sqlite3 /opt/etc/wireguard.d/WireGuard.db "SELECT client FROM passthru where server='$WG_INTERFACE';" | sort | uniq | tr '\n' ' ')

    local ACTION="add"
    [ -n "$1" ] && ACTION=$1        # "del" or "add"

    if [ -n "$PASSTHRU_CLIENTS" ];then

    local IP_ADDR=$(sqlite3 $SQL_DATABASE "SELECT subnet FROM servers where peer='$WG_INTERFACE';")

        for VPN_ID in $PASSTHRU_CLIENTS     # wg11 wg14
            do
                local VPN_NUM=${VPN_ID#"${VPN_ID%?}"}

                if [ "$ACTION" == "add" ];then
                    # Ensure target WireGuard 'client' peer routing policy table contains WireGuard 'server' peer IP/network in the passthru tunnel @chongnt
                    while read ROUTE; do
                        ip route $ACTION $ROUTE table 12$VPN_NUM 2>/dev/null && ROUTING_CHANGED=
                    done << EOR
$(ip route | grep "$WG_INTERFACE")
EOR

                    [ ${ROUTING_CHANGED+x} ] && ip route flush cache
                fi
            done
    fi
}

#For verbose debugging, uncomment the following two lines, and uncomment the last line of this script
#set -x
#(

Main() { true; }            # Syntax that is Atom Shellchecker compatible!

ANSIColours

SQL_DATABASE="/opt/etc/wireguard.d/WireGuard.db"        # v1.13
CONFIG_DIR="/opt/etc/wireguard.d/"                 # Conform to "standards"         # v1.08 @elorimer
INSTALL_DIR="/jffs/addons/wireguard/"

modprobe xt_set
modprobe xt_comment                                                                 # v1.13 Hotfix
insmod /opt/lib/modules/wireguard 2> /dev/null

VPN_ID=$1
[ -z "$1" ] && VPN_ID="wg21"
#logger -st "wireguard-server${VPN_ID:2:1}" "Configuring Wireguard VPN Server ($VPN_ID) on Port:"$wgport

VPN_NUM=${VPN_ID#"${VPN_ID%?}"}                     # v4.02

wgport=$(awk '/Listen/ {print $3}' ${CONFIG_DIR}${VPN_ID}.conf)
SOCKET=$(nvram get wan_gateway)":"$wgport
SOCKET=$(nvram get wan0_gateway)":"$wgport          # v4.04

WG_INTERFACE=$1

DESC=$(sqlite3 $SQL_DATABASE "SELECT tag FROM servers where peer='$WG_INTERFACE';")
DESC=$(printf "%s" "$DESC" | sed 's/^[ \t]*//;s/[ \t]*$//')
[ -z "$DESC" ] && DESC="# Unidentified"

if [ "$2" != "disable" ];then
    wgport=$(awk '/Listen/ {print $3}' ${CONFIG_DIR}${VPN_ID}.conf)
    Subnet=$(sqlite3 $SQL_DATABASE "SELECT subnet FROM servers where peer='$WG_INTERFACE';") # v1.09 @here1310
    [ -n "$(echo "$Subnet" | Is_Private_IPv6)" ] && { USE_IPV6="Y"; IPV6_TXT="(IPv6) "; }

    if [ "$USE_IPV6" != "Y" ];then
        # CIDR ?
        if [ -z "$(echo "$Subnet" | Is_IPv4_CIDR)" ];then
            SUBNET_PREFIX=${Subnet%.*}
            Subnet=$SUBNET_PREFIX".0/24"
        fi
    fi

    logger -t "wireguard-server${VPN_ID:3:1}" "Initialising Wireguard VPN ${IPV6_TXT}'Server' Peer (${cBMAG}$VPN_ID$cBGRE) on $SOCKET"
    echo -e $cBCYA"\twireguard-server${VPN_ID:3:1}: Initialising Wireguard VPN ${IPV6_TXT}'Server' Peer (${cBMAG}$VPN_ID$cBCYA) on $SOCKET (${cBMAG}$DESC${cBCYA})"$cRESET

    if [ "$USE_IPV6" != "Y" ];then
        ip link del dev $VPN_ID 2>/dev/null
        ip link add dev $VPN_ID type wireguard
    else
        ip -6 link del dev $VPN_ID 2>/dev/null
        ip -6 link add dev $VPN_ID type wireguard
    fi
    wg set $VPN_ID fwmark $wgport
    wg setconf $VPN_ID ${CONFIG_DIR}$VPN_ID.conf
    if [ "$USE_IPV6" != "Y" ];then
        ip address add dev $VPN_ID $Subnet
        ip link set up dev $VPN_ID
    else
        ip -6 address add dev $VPN_ID $Subnet
        ip -6 link set up dev $VPN_ID
    fi
    #ifconfig $VPN_ID mtu 1380
    ifconfig $VPN_ID mtu 1420                       # v1.02

    TIMESTAMP=$(date +%s)
    sqlite3 $SQL_DATABASE "INSERT into session values('$WG_INTERFACE','Start','$TIMESTAMP');"   # v1.13

    ifconfig $VPN_ID txqueuelen 1000

    Firewall_delete

    if [ "$USE_IPV6" != "Y" ];then
        ip route add default dev $VPN_ID table 2${VPN_NUM}"0"       # v4.03
        ip rule add fwmark $(printf "%#07x\n" "2${VPN_NUM}0") table 2${VPN_NUM}"0" prio 98${VPN_NUM}0   # v4.03
    else
        ip -6 route add default dev $VPN_ID table 2${VPN_NUM}"0"    # v4.03
        ip -6 rule add fwmark $(printf "%#07x\n" "2${VPN_NUM}0") table 2${VPN_NUM}"0" prio 98${VPN_NUM}0   # v4.03
    fi

    Manage_Passthru "add"

    if [ "$USE_IPV6" != "Y" ];then
        iptables -t mangle -I FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'"
        iptables -t mangle -I FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'"
        iptables -t mangle -I FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'"
        iptables -t mangle -I PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'"

        iptables -I INPUT -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'"
        iptables -I INPUT -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        iptables -I FORWARD -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        iptables -I FORWARD -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        iptables -I OUTPUT -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        iptables -t nat -I PREROUTING -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'"
    else
        ip6tables -t mangle -I FORWARD -o $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'"
        ip6tables -t mangle -I FORWARD -i $VPN_ID -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu -m comment --comment "WireGuard 'server'"
        ip6tables -t mangle -I FORWARD -o $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'"
        ip6tables -t mangle -I PREROUTING -i $VPN_ID -j MARK --set-xmark 0x01/0x7 -m comment --comment "WireGuard 'server'"

        ip6tables -I INPUT -p udp --dport $wgport -j ACCEPT -m comment --comment "WireGuard 'server'"
        ip6tables -I INPUT -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        ip6tables -I FORWARD -i $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        ip6tables -I FORWARD -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
        ip6tables -I OUTPUT -o $VPN_ID -j ACCEPT -m comment --comment "WireGuard 'server'"
    fi

    # User Exit @ZebMcKayhan
    [ -f ${INSTALL_DIR}Scripts/${VPN_ID}-up.sh ] && { logger -t "wireguard-server${VPN_ID:3:1}" "Executing ${VPN_ID}-up.sh"; sh ${INSTALL_DIR}Scripts/${VPN_ID}-up.sh; }

    ###############################################################EIC Hack 5 of 5##############################
    #logger -st "($(basename $0))" "Configuring Wireguard to VPN Client (pass-thru)"
    #[ -n "$(wg show interfaces | grep -E "wg[0-1]")" ] && iptables -I POSTROUTING -t nat -s $Subnet -o wg1+ -j MASQUERADE -m comment --comment "WireGuard 'server'"
    echo -en $cBGRE"\t"
    logger -st "wireguard-server${VPN_ID:3:1}" "Initialisation complete."
    echo -e $cRESET
    ############################################################################################################
else
    ip link del dev $VPN_ID 2>/dev/null

    TIMESTAMP=$(date +%s)
    sqlite3 $SQL_DATABASE "INSERT into session values('$WG_INTERFACE','End','$TIMESTAMP');" # v1.13

    Firewall_delete

    Manage_Passthru "del"

    ip route flush table 2${VPN_NUM}"0" 2>/dev/null     # v4.03
    ip rule del prio 98${VPN_NUM}0      2>/dev/null     # v4.03
    ip route flush cache                                # v4.03

    ip -6 route flush table 2${VPN_NUM}"0" 2>/dev/null     # v4.03
    ip -6 rule del prio 98${VPN_NUM}0      2>/dev/null     # v4.03
    ip -6 route flush cache                                # v4.03


    # User Exit @ZebMcKayhan
    [ -f ${INSTALL_DIR}Scripts/${VPN_ID}-down.sh ] && { logger -t "wireguard-server${VPN_ID:3:1}" "Executing ${VPN_ID}-down.sh"; sh ${INSTALL_DIR}Scripts/${VPN_ID}-down.sh; }

    logger -t "wireguard-server${VPN_ID:3:1}" "Wireguard VPN 'server' Peer ($VPN_ID) on" $SOCKET "Terminated"

    echo -en $cBGRE"\twireguard-server${VPN_ID:3:1}: Wireguard VPN '$MODE' Peer (${cBMAG}$VPN_ID$cBGRE) on $SOCKET (${cBMAG}$DESC${cBGRE}) ${cBRED}Terminated\n"$cRESET

    echo -e $cRESET
fi


############################################################################EIC Hack 3 of 3####################################
#) 2>&1 | logger -t $(basename $0)"[$$_***DEBUG]"
###############################################################################################################################
